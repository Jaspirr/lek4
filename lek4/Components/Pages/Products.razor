@page "/products"
@page "/products/{number:double}"
@using lek4.Components.Service

@inject NavigationManager NavigationManager
@inject lek4.Components.Service.NumberService NumberService
@inject lek4.Components.Service.ProductService ProductService

@code {
    [Parameter]
    public double? number { get; set; }

    private List<ProductService.ProductData> products = new List<ProductService.ProductData>(); // List to hold product data
    private int unlockingProduct = -1; // Keep track of the product being unlocked
    private double remainingOdds;

    protected override async Task OnInitializedAsync()
    {
        if (!number.HasValue)
        {
            number = NumberService.CurrentNumber;
        }

        NumberService.CurrentNumber = number.Value;
        remainingOdds = Math.Min(NumberService.GetRemainingOdds(), 100.0); // Limit odds to 100

        // Fetch the actual products from Firebase
        await FetchProductsFromFirebase();
    }

    private async Task FetchProductsFromFirebase()
    {
        // Fetch the product data from Firebase
        products = await ProductService.FetchAllProductsFromFirebaseAsync();
    }

    private async Task GoToProduct(int productNumber)
    {
        unlockingProduct = productNumber;
        StateHasChanged(); // Update the component to start the animation
        await Task.Delay(1000); // Wait for the animation to complete (1 second)

        // Unlock the product in NumberService
        NumberService.UnlockProduct(productNumber);

        // Navigate to the specific product page
        NavigationManager.NavigateTo($"/product/{productNumber}");
    }

    private string GetIconClass(int productNumber)
    {
        // Return the correct icon class based on whether the product is unlocked
        return NumberService.IsProductUnlocked(productNumber) ? "fas fa-unlock" : "fas fa-lock";
    }

    private bool IsProductLockedIn(int productNumber)
    {
        // Check if the product is locked in via NumberService
        return NumberService.IsProductLockedIn(productNumber);
    }

    private string GetProductClass(int productNumber)
    {
        // Return the correct CSS class based on the product's lock-in status
        return NumberService.IsProductLockedIn(productNumber) ? "product locked-in" : "product locked";
    }
}

<h3 class="center-title">Products</h3>
<p class="remaining-odds">Odds: @remainingOdds.ToString("0.0")x</p> <!-- Display remaining odds -->

<div class="product-grid @(products.Count == 1 ? "single-product" : (products.Count == 2 ? "two-products" : (products.Count == 3 ? "three-products" : (products.Count == 4 ? "four-products" : "many-products"))))">
    @foreach (var product in products)
    {
        <div class="@GetProductClass(product.ProductNumber) product-@(product.ProductNumber) @(unlockingProduct == product.ProductNumber ? "unlocking" : "")">
            <a @onclick="async () => await GoToProduct(product.ProductNumber)">
                <div class="icon-wrapper">
                    @if (!IsProductLockedIn(product.ProductNumber))
                    {
                        <i class="@GetIconClass(product.ProductNumber)"></i> <!-- Lock icon -->
                    }
                    @if (IsProductLockedIn(product.ProductNumber))
                    {
                        <i class="fas fa-check checkmark"></i> <!-- Checkmark icon -->
                    }
                </div>
            </a>
        </div>
    }
</div>

<style>
    /* Add relevant CSS for the page here */
</style>
