﻿
@page "/login"
@using Firebase.Auth
@using System.Text.Json
@inject FirebaseAuthClient AuthClient
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject UserService UserService
@inject AutoDrawService AutoDrawService
@inject WinnerCleanupService WinnerCleanupService


    @if (isCheckingAuth)
    {
        <div id="loading-screen">
            <div class="loading-animation">
                <div class="loading-circle"></div>
                <div class="loading-circle"></div>
                <div class="loading-circle"></div>
            </div>
        </div>
    }
    else
    {
    <div class="login-container">
        <div class="login-form">
            <h3>Login</h3>
            <EditForm Model="loginModel" OnValidSubmit="LoginUser">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                        <InputText id="email" @bind-Value="loginModel.Email" type="email" placeholder="Email" />
                </div>
                <div class="form-group">
                    <InputText id="password" @bind-Value="loginModel.Password" type="password" placeholder="Password" />
                </div>
                <div class="stay-logged-in">
                    <label>
                        <InputCheckbox @bind-Value="stayLoggedIn" />
                        <span>Stay Logged In</span>
                    </label>
                </div>
                <button type="submit" class="login-button">Login</button>
            </EditForm>

            <div class="divider">
                <hr class="line" />
                <span>OR</span>
                <hr class="line" />
            </div>

            <!-- Google Login Button -->
            <div class="google-login-container">
                <button class="google-login-button" @onclick="StartGoogleLogin">
                    <img src="images/g-logo.png" alt="Google Logo" />
                </button>
            </div>
            <div class="login-footer">
                <p>Don't have an account? <NavLink href="/signup">Sign up here</NavLink></p>
            </div>
            <div class="error-message">@errorMessage</div>
        </div>

        <!-- WebView for Google Sign-In -->
        <div class="google-login-webview" style="display: none;" id="webViewContainer">
            <iframe id="webView" style="width: 100%; height: 500px; border: none;" @ref="webView"></iframe>
            <button onclick="hideWebView('webViewContainer')" style="position: absolute; top: 10px; right: 10px;">Close</button>
        </div>

    </div>
    }


@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;
    private bool stayLoggedIn = false;
    private ElementReference webView;
    private string secureUserEmail;
    private bool isCheckingAuth = true;


    protected override async Task OnInitializedAsync()
    {
        isCheckingAuth = true;
        Console.WriteLine("OnInitializedAsync called for Login page");

        try
        {
            Console.WriteLine("Starting CheckAndResetWeeklyOddsAsync...");
            await UserService.CheckAndResetWeeklyOddsAsync();
            Console.WriteLine("Weekly Odds checked and reset if needed.");

            Console.WriteLine("Initializing draw timers in AutoDrawService...");
            await AutoDrawService.InitializeDrawTimersAsync();
            Console.WriteLine("Draw timers initialized successfully.");

            Console.WriteLine("Fetching userUid ...");
            var userUid = await SecureStorage.GetAsync("userUid");

            Console.WriteLine("Checking and cleaning up winner files...");
            await WinnerCleanupService.CheckAndCleanupWinnerFilesAsync();
            Console.WriteLine("Winner file cleanup check completed.");

            var firebaseToken = await SecureStorage.GetAsync("firebaseToken");
            if (!string.IsNullOrEmpty(firebaseToken))
            {
                var success = await SignInWithCustomTokenAsync(firebaseToken);
                if (success != null)
                {
                    Console.WriteLine("Auto-login with token successful.");
                    NavigationManager.NavigateTo("/");
                    return;
                }
                else
                {
                    Console.WriteLine("Token found but auto-login failed.");
                }
            }
            else
            {
                Console.WriteLine("No firebaseToken found in SecureStorage.");
            }

            if (!string.IsNullOrEmpty(userUid))
            {
                Console.WriteLine($"userUid found: {userUid}. Fetching user data from Firebase...");
                var getUrl = $"https://firebasestorage.googleapis.com/v0/b/stega-426008.appspot.com/o/users%2F{userUid}.json?alt=media";
                var response = await HttpClient.GetAsync(getUrl);

                if (response.IsSuccessStatusCode)
                {
                    var jsonData = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"User data fetched successfully for UID: {userUid}");
                    var userData = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonData);

                    if (userData != null &&
                        userData.TryGetValue("stayLoggedIn", out var value) &&
                        value is bool stayLoggedIn &&
                        stayLoggedIn)
                    {
                        Console.WriteLine("User is marked to stay logged in. Redirecting...");
                        NavigationManager.NavigateTo("/");
                        return;
                    }

                    Console.WriteLine("User is not marked to stay logged in. Showing login form...");
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    Console.WriteLine($"No data file found for UID: {userUid}. Showing login form...");
                }
                else
                {
                    Console.WriteLine($"Failed to fetch user data. Status code: {response.StatusCode}");
                }
            }
            else
            {
                Console.WriteLine("No UID found in SecureStorage. Showing login form...");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
        }
        finally
        {
            isCheckingAuth = false;

            // 🧠 Dölj native loading screen när vi är klara med auth
            await JSRuntime.InvokeVoidAsync("hideLoadingScreen");
        }
    }

    private async Task LoginUser()
    {
        try
        {
            // Logga in användaren via Firebase
            var userCredential = await AuthClient.SignInWithEmailAndPasswordAsync(loginModel.Email, loginModel.Password);
            var firebaseUser = userCredential.User;

            if (firebaseUser != null)
            {
                // Spara användarens UID och e-post till LocalStorage
                var userEmail = firebaseUser.Info.Email;
                var userUid = firebaseUser.Uid;
                var firebaseToken = await firebaseUser.GetIdTokenAsync();
                await SecureStorage.SetAsync("firebaseToken", firebaseToken);

                secureUserEmail = await SecureStorage.GetAsync("userEmail");
                await localStorage.SetItemAsync("userEmail", userEmail);
                await SecureStorage.SetAsync("userUid", userUid);

                if (stayLoggedIn)
                {
                    // Spara statusen "stanna inloggad" i Firebase Storage
                    await SaveStayLoggedInStatus(userUid, true);
                }

                // Uppdatera användarens Daily Streak i Firebase
                await UserService.UpdateDailyStreakInUserStats(userEmail);

                // Navigera till hemsidan efter lyckad inloggning
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            errorMessage = GetErrorMessage(ex.Message);
            Console.WriteLine($"Error during login: {errorMessage}");
        }
    }

    private async Task SaveStayLoggedInStatus(string userId, bool stayLoggedInStatus)
    {
        try
        {
            // URL to user's JSON data in Firebase
            var getUrl = $"https://firebasestorage.googleapis.com/v0/b/stega-426008.appspot.com/o/users%2F{userId}.json?alt=media";

            // Fetch existing data
            var getResponse = await HttpClient.GetAsync(getUrl);
            var existingDataJson = "{}"; // Default empty JSON

            if (getResponse.IsSuccessStatusCode)
            {
                existingDataJson = await getResponse.Content.ReadAsStringAsync();
            }

            var existingData = JsonSerializer.Deserialize<Dictionary<string, object>>(existingDataJson) ?? new Dictionary<string, object>();

            // Update stayLoggedIn status
            existingData["stayLoggedIn"] = stayLoggedInStatus;

            var updatedJson = JsonSerializer.Serialize(existingData);
            var content = new StringContent(updatedJson, System.Text.Encoding.UTF8, "application/json");

            // Save updated data to Firebase
            var putUrl = $"https://firebasestorage.googleapis.com/v0/b/stega-426008.appspot.com/o/users%2F{userId}.json";
            var putResponse = await HttpClient.PostAsync(putUrl, content);

            if (!putResponse.IsSuccessStatusCode)
            {
                throw new Exception($"Failed to save stayLoggedIn status: {await putResponse.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving stayLoggedIn status: {ex.Message}");
        }
    }
    private async Task<bool> SignInWithCustomTokenAsync(string customToken)
    {
        try
        {
            var apiKey = "AIzaSyCyLKylikL5dUKQEKxMn6EkY6PnBWKmJtA"; // ✅ Din Firebase API Key
            var url = $"https://identitytoolkit.googleapis.com/v1/accounts:signInWithCustomToken?key={apiKey}";

            var payload = new
            {
                token = customToken,
                returnSecureToken = true
            };

            var response = await HttpClient.PostAsJsonAsync(url, payload);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<JsonElement>(json);

                var idToken = result.GetProperty("idToken").GetString();
                var uid = result.GetProperty("localId").GetString();

                Console.WriteLine($"Custom token login successful. UID: {uid}");

                // ✅ Spara till SecureStorage (så vi kan auto-logga in i framtiden)
                await SecureStorage.SetAsync("firebaseToken", idToken);
                await SecureStorage.SetAsync("userUid", uid);

                return true;
            }
            else
            {
                var errorBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Custom token login failed. Response: {errorBody}");
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during SignInWithCustomTokenAsync: {ex.Message}");
            return false;
        }
    }

    private string GetErrorMessage(string responseBody)
    {
        try
        {
            var responseJson = JsonSerializer.Deserialize<JsonElement>(responseBody);
            var error = responseJson.GetProperty("error").GetProperty("message").GetString();
            return error switch
            {
                "EMAIL_NOT_FOUND" => "The user does not exist. Please check your email or sign up.",
                "INVALID_PASSWORD" => "The password is invalid. Please try again.",
                "USER_DISABLED" => "The user account has been disabled.",
                _ => "An error occurred during login. Please try again."
            };
        }
        catch
        {
            return "An error occurred during login. Please try again.";
        }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
    [JSInvokable]
    public async Task OnPopupNavigated(string currentUrl)
    {
        Console.WriteLine($"Navigated to: {currentUrl}");

        if (currentUrl.StartsWith("https://stega-426008.appspot.com"))
        {
            try
            {
                var token = ExtractGoogleAccessToken(currentUrl);
                await CompleteGoogleLogin(token);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during navigation: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Unexpected redirect URI or navigation.");
        }
    }


    private async Task StartGoogleLogin()
    {
        try
        {
            var googleAuthUrl = "https://accounts.google.com/o/oauth2/v2/auth"
                                + "?client_id=870131863077-inn7d8ss726rqlin37edc7kourime574.apps.googleusercontent.com" // Din Web Client ID
                                + "&redirect_uri=https://stega-426008.appspot.com" // Redirect URI
                                + "&response_type=token" // Viktig parameter
                                + "&scope=email%20profile" // Åtkomst till email och profil
                                + "&state=secure_random_state"; // Ett slumpmässigt värde för att förhindra CSRF

            // Öppna popup för Google OAuth
            await JSRuntime.InvokeVoidAsync("openPopup", googleAuthUrl);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Google Login Error: {ex.Message}");
        }
    }


    private string ExtractTokenFromUrl(string url)
    {
        // Extract access token from the URL fragment
        var token = url.Split('#').LastOrDefault()?.Split('&')
            ?.FirstOrDefault(p => p.StartsWith("access_token="))?.Split('=').LastOrDefault();
        return token;
    }

    private string ExtractGoogleAccessToken(string finalUri)
    {
        var uri = new Uri(finalUri);
        var queryParams = uri.Fragment.TrimStart('#').Split('&');
        foreach (var param in queryParams)
        {
            if (param.StartsWith("access_token="))
            {
                return param.Split('=')[1];
            }
        }

        throw new Exception("Access token not found in redirect URI.");
    }

    private async Task<string> ExchangeGoogleTokenForFirebaseToken(string googleToken)
    {
        var payload = new
        {
            postBody = $"id_token={googleToken}&providerId=google.com",
            requestUri = "http://localhost", // Behövs av Firebase, även om den inte används direkt
            returnSecureToken = true
        };

        var response = await HttpClient.PostAsJsonAsync(
            "https://identitytoolkit.googleapis.com/v1/accounts:signInWithIdp?key=DIN_FIREBASE_API_KEY",
            payload);

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var result = JsonSerializer.Deserialize<JsonElement>(json);
            return result.GetProperty("idToken").GetString();
        }

        throw new Exception("Failed to exchange Google token for Firebase token.");
    }

    private async Task AuthenticateWithFirebase(string firebaseToken)
    {
        await localStorage.SetItemAsync("firebaseToken", firebaseToken);
        NavigationManager.NavigateTo("/"); // Redirect to the homepage
    }
    private async Task CompleteGoogleLogin(string token)
    {
        if (!string.IsNullOrEmpty(token))
        {
            var firebaseToken = await ExchangeGoogleTokenForFirebaseToken(token);

            if (!string.IsNullOrEmpty(firebaseToken))
            {
                await localStorage.SetItemAsync("firebaseToken", firebaseToken);
                NavigationManager.NavigateTo("/"); // Omdirigera användaren efter inloggning
            }
            else
            {
                Console.WriteLine("Failed to exchange Google token for Firebase token.");
            }
        }
    }

}


<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh; /* Full höjd */
        background-color: #f5f5f5;
    }

    .login-form {
        margin: 0 auto;
        width: 80%;
        max-width: 400px; /* Sätt en maxbredd */
        background-color: white;
        padding: 25px;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        text-align: center;
        font-family: 'Arial', sans-serif;
    }

    .login-form h3 {
        margin-bottom: 20px;
        font-size: 1.8em;
        color: #4a4a4a;
        font-weight: 600;
    }

    .form-group {
        margin: 0 auto;
        width: 80%;
        margin-bottom: 15px;
        text-align: left;
    }

    .form-group input {
        width: 100%;
        padding: 10px;
        font-size: 1rem;
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .form-group input:focus {
        border-color: #F0FFF0;
        outline: none;
        box-shadow: 0 0 5px rgba(168, 130, 214, 0.5);
    }

    .stay-logged-in {
        display: flex;
        margin-bottom: 10px;
        align-items: center;
        gap: 8px;
        font-size: 0.9rem;
        color: #4a4a4a;
        justify-content: center; /* Centrerar checkbox och text */
    }

    .stay-logged-in label {
        display: flex;
        align-items: center;
        cursor: pointer;
    }

    .stay-logged-in input[type="checkbox"] {
        margin-right: 5px;
        transform: scale(1.2); /* Gör checkboxen lite större */
        accent-color: #556B2F; /* Snyggare färg för checkbox */
    }

    .login-button {
        width: 60%;
        padding: 12px 20px;
        background-color: #556B2F;
        color: #F0FFF0;
        border: none;
        border-radius: 5px;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .login-button:hover {
        background-color: #8b5fc1;
        color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .login-footer {
        margin-top: 20px;
        font-size: 0.9rem;
        color: #4a4a4a;
    }

    .login-footer a {
        color: #556B2F;
        text-decoration: none;
        font-weight: 600;
    }

    .login-footer a:hover {
        text-decoration: underline;
    }

    .error-message {
        color: red;
        margin-top: 10px;
    }

    @@media (max-width: 480px) {
        .login-form {
            padding: 15px;
        }

        .form-group input {
            font-size: 0.9rem;
        }

        .login-button {
            font-size: 0.9rem;
            padding: 10px 15px;
        }
    }

    .google-login-container {
        display: flex;
        justify-content: center; /* Centrerar knappen horisontellt */
        margin-top: 20px; /* Skapa utrymme mellan knappen och ovanstående element */
    }

    .google-login-button {
        width: 60%; /* Fyll samma bredd som login-knappen */
        max-width: 300px; /* Styr maxbredden */
        height: 45px; /* Samma höjd som login-knappen */
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: white; /* Google-blå */
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
         box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

        .google-login-button:hover {
            background-color: #357AE8; /* Mörkare blå vid hover */
        }

        .google-login-button img {
            width: 24px;
            height: 24px;
        }

    .divider {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px; /* Avstånd mellan linjer och text */
        margin: 20px 0; /* Utrymme ovanför och under divider */
        font-size: 16px;
        font-weight: bold;
        color: #4a4a4a; /* Textfärg */
    }

        .divider .line {
            width: 90px; /* Sätt fast bredd för linjerna */
            height: 1px;
            background-color: #ddd; /* Linjefärg */
            border: none;
        }

    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        font-size: 1.2rem;
        color: #555;
    }

    #loading-screen {
        position: fixed;
        width: 100%;
        height: 100%;
        background: linear-gradient(145deg, #F0FFF0, #556B2F);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        transition: opacity 0.5s ease-in-out;
    }

    .loading-animation {
        display: flex;
        justify-content: space-around;
        align-items: center;
        width: 100px;
    }

    .loading-circle {
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: white;
        opacity: 0.3;
        animation: bounce 1.4s infinite ease-in-out both;
    }

        .loading-circle:nth-child(1) {
            animation-delay: -0.32s;
        }

        .loading-circle:nth-child(2) {
            animation-delay: -0.16s;
        }

        .loading-circle:nth-child(3) {
            animation-delay: 0s;
        }

    @@keyframes bounce {
        0%, 80%, 100%

    {
        transform: translateY(6px) scale(0.9);
        opacity: 0.3;
    }

    40% {
        transform: translateY(0px) scale(1);
        opacity: 1;
    }

    }
    input, select, button {
    -webkit-appearance: none;
    appearance: none;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
}

input[type="email"],
input[type="password"] {
    font-size: 16px;
    padding: 12px;
    border-radius: 10px;
    border: 1px solid #ccc;
    background-color: #f9f9f9;
    box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
}

button {
    font-size: 17px;
    padding: 14px;
    border-radius: 12px;
}

</style>
<script>
    function monitorIframeNavigation(iframeId, dotNetRef) {
        const iframe = document.getElementById(iframeId);

        if (!iframe) {
            console.error(`Iframe with ID '${iframeId}' not found.`);
            return;
        }

        iframe.onload = function () {
            try {
                const currentUrl = iframe.contentWindow.location.href;
                dotNetRef.invokeMethodAsync('OnIframeNavigated', currentUrl);
            } catch (e) {
                console.warn('Could not access iframe URL:', e);
            }
        };
    }

    function setIframeSource(iframeId, url) {
        const iframe = document.getElementById(iframeId);
        if (iframe) {
            iframe.src = url;
        }
    }
    function openPopup(url, width = 600, height = 700) {
        const left = (screen.width / 2) - (width / 2);
        const top = (screen.height / 2) - (height / 2);
        const popup = window.open(url, '_blank', `width=${width},height=${height},top=${top},left=${left}`);

        const checkNavigation = setInterval(() => {
            try {
                const popupUrl = popup.location.href;
                if (popupUrl.startsWith("https://stega-426008.appspot.com")) {
                    clearInterval(checkNavigation);
                    popup.close();

                    // Notify C# method
                    DotNet.invokeMethodAsync('lek4', 'OnPopupNavigated', popupUrl);
                }
            } catch (err) {
                // Ignore cross-origin errors
            }

            if (popup.closed) {
                clearInterval(checkNavigation);
            }
        }, 500);
    }

</script>