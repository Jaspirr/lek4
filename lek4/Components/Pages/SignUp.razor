@page "/signup"
@using Firebase.Auth
@using System.Text.Json
@using System.Text
@using System.Net.Http
@using System.Net
@inject FirebaseAuthClient AuthClient
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient


<div class="signup-container">
    <div class="signup-form">
        <h3 class="signup-title">Sign Up</h3>
        <EditForm Model="signupModel" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="firstName">First Name:</label>
                <InputText id="firstName" @bind-Value="signupModel.FirstName" />
            </div>
            <div class="form-group">
                <label for="lastName">Last Name:</label>
                <InputText id="lastName" @bind-Value="signupModel.LastName" />
            </div>
            <div class="form-group">
                <label for="birthDate">Birth Date:</label>
                <div class="date-picker">
                    <select @bind="selectedYear">
                        @foreach (var year in years)
                        {
                            <option value="@year">@year</option>
                        }
                    </select>
                    <select @bind="selectedMonth">
                        @foreach (var month in months)
                        {
                            <option value="@month.Value">@month.Key</option>
                        }
                    </select>
                    <select @bind="selectedDay">
                        @foreach (var day in days)
                        {
                            <option value="@day">@day</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label for="city">City:</label>
                <InputSelect id="city" @bind-Value="signupModel.City">
                    @foreach (var city in cities)
                    {
                        <option value="@city">@city</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="gender">Gender:</label>
                <InputSelect id="gender" @bind-Value="signupModel.Gender">
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                    <option value="Non-binary">Non-binary</option>
                    <option value="Prefer not to say">Prefer not to say</option>
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="email">Email:</label>
                <InputText id="email" @bind-Value="signupModel.Email" />
            </div>
            <div class="form-group">
                <label for="phoneNumber">Mobile Number:</label>
                <div class="phone-input">
                    <InputSelect @bind-Value="selectedCountryCode" class="country-select" @onchange="ValidatePhoneNumber">
                        @foreach (var country in countryCodes)
                        {
                            <option value="@country.Code">
                                @country.Flag @country.Code
                            </option>
                        }
                    </InputSelect>
                    <InputText id="phoneNumber" @bind-Value="signupModel.PhoneNumber" @oninput="ValidatePhoneNumber" placeholder="Enter number" required />
                </div>
                <p style="color: red;" hidden="@isPhoneNumberValid">Invalid phone number format.</p>
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <InputText id="password" @bind-Value="signupModel.Password" type="password" />
            </div>
            <div class="form-group">
                <label for="confirmPassword">Confirm Password:</label>
                <InputText id="confirmPassword" @bind-Value="signupModel.ConfirmPassword" type="password" />
            </div>
            <button class="signup-button" type="submit">Sign Up</button>
            <div class="signup-footer">
                Already have an account? <NavLink href="/login">Login here</NavLink>
            </div>
        </EditForm>

    </div>
</div>

@code {
    private SignupModel signupModel = new SignupModel
        {
            City = "Stockholm", // Standardvärde för City
            Gender = "Male"     // Standardvärde för Gender
        };

    private int selectedYear;
    private int selectedMonth;
    private int _selectedDay;
    private int selectedDay
    {
        get => _selectedDay;
        set
        {
            if (_selectedDay != value)
            {
                _selectedDay = value;
            }
        }
    }

    private List<int> days = Enumerable.Range(1, 31).ToList();
    private List<int> years = new List<int>();
    private Dictionary<string, int> months = new Dictionary<string, int>
    {
        {"January", 1},
        {"February", 2},
        {"March", 3},
        {"April", 4},
        {"May", 5},
        {"June", 6},
        {"July", 7},
        {"August", 8},
        {"September", 9},
        {"October", 10},
        {"November", 11},
        {"December", 12}
    };

    private List<string> cities = new List<string>
    {
        "Stockholm", "Göteborg", "Malmö", "Uppsala", "Västerås", "Örebro", "Linköping", "Helsingborg",
        "Jönköping", "Norrköping", "Lund", "Umeå", "Gävle", "Borås", "Eskilstuna", "Södertälje", "Karlstad",
        "Täby", "Växjö", "Halmstad", "Sundsvall", "Luleå", "Trollhättan", "Östersund", "Borlänge", "Tumba",
        "Kalmar", "Skövde", "Karlskrona", "Kristianstad"
    };

    private bool isPhoneNumberValid = true;
    private string selectedCountryCode = "+46";
    private List<CountryCode> countryCodes = new List<CountryCode>
    {
        new CountryCode { Code = "+46", Name = "Sweden", Flag = "🇸🇪" },
        new CountryCode { Code = "+47", Name = "Norway", Flag = "🇳🇴" },
        new CountryCode { Code = "+45", Name = "Denmark", Flag = "🇩🇰" },
        new CountryCode { Code = "+358", Name = "Finland", Flag = "🇫🇮" },
        new CountryCode { Code = "+44", Name = "United Kingdom", Flag = "🇬🇧" },
        new CountryCode { Code = "+1", Name = "United States", Flag = "🇺🇸" }
    };
    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Generera lista med år
        for (int i = 1900; i <= DateTime.Now.Year; i++)
        {
            years.Add(i);
        }

        // Sätt initiala värden
        selectedYear = DateTime.Now.Year;
        selectedMonth = DateTime.Now.Month;
        selectedDay = DateTime.Now.Day;

        // Uppdatera dagarna baserat på initial månad och år
        UpdateDays();
    }

    private void UpdateDays()
    {
        // Hämta antalet dagar i den valda månaden och året
        int daysInMonth = DateTime.DaysInMonth(selectedYear, selectedMonth);
        days = Enumerable.Range(1, daysInMonth).ToList();

        // Se till att vald dag inte överskrider det nya antalet dagar
        if (selectedDay > daysInMonth)
        {
            selectedDay = daysInMonth;
        }
    }

    private async Task RegisterUser()
    {
        signupModel.BirthDate = new DateTime(selectedYear, selectedMonth, selectedDay);

        // Ålderskontroll
        if (CalculateAge(signupModel.BirthDate) < 18)
        {
            await Application.Current.MainPage.DisplayAlert(
                "Age Requirement",
                "You must be at least 18 years old to create an account.",
                "OK"
            );
            return;
        }

        // Kontrollera och validera telefonnummer med vald landskod
        ValidatePhoneNumber();
        if (!isPhoneNumberValid)
        {
            await Application.Current.MainPage.DisplayAlert(
                "Invalid Phone Number",
                $"Please enter a valid phone number for {selectedCountryCode}.",
                "OK"
            );
            return;
        }

        // Kontrollera att lösenorden matchar
        if (signupModel.Password != signupModel.ConfirmPassword)
        {
            await Application.Current.MainPage.DisplayAlert(
                "Password Mismatch",
                "The passwords you entered do not match. Please make sure both fields contain the same password and try again.",
                "OK"
            );
            return;
        }

        try
        {
            // Kontrollera om e-posten redan finns registrerad
            var emailExists = await CheckIfEmailExists(signupModel.Email);
            if (emailExists)
            {
                await Application.Current.MainPage.DisplayAlert(
                    "Email Already Registered",
                    "The email address you entered is already associated with an existing account.",
                    "OK"
                );
                return;
            }

            // Skapa användare med Firebase Authentication
            var userCredential = await AuthClient.CreateUserWithEmailAndPasswordAsync(signupModel.Email, signupModel.Password);
            Console.WriteLine($"User created with UID: {userCredential.User.Uid}");

            signupModel.PhoneNumber = FormatPhoneNumber(selectedCountryCode, signupModel.PhoneNumber);

            await SaveUserProfileToStorage(userCredential.User);
            Console.WriteLine("User profile saved to storage.");

            // Framgångsmeddelande
            await Application.Current.MainPage.DisplayAlert("Success", "Registration successful!", "Ok");
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Full Exception: {ex}");
            var errorMessage = GetErrorMessage(ex.Message);

            await Application.Current.MainPage.DisplayAlert(
                "An error occurred",
                $"{errorMessage}\n\nIf the problem persists, please contact support.",
                "OK"
            );
        }
    }

    private void ValidatePhoneNumber()
    {
        var fullPhoneNumber = FormatPhoneNumber(selectedCountryCode, signupModel.PhoneNumber);
        isPhoneNumberValid = System.Text.RegularExpressions.Regex.IsMatch(fullPhoneNumber, @"^\+\d{7,15}$");
    }

    private string FormatPhoneNumber(string countryCode, string localNumber)
    {
        // Länder där ledande 0 ska tas bort i internationellt format
        var trimLeadingZeroCountries = new[] { "+46", "+47", "+45", "+358" };

        if (trimLeadingZeroCountries.Contains(countryCode) && localNumber.StartsWith("0"))
        {
            localNumber = localNumber.TrimStart('0');
        }

        return $"{countryCode}{localNumber}";
    }

    private async Task<bool> CheckIfEmailExists(string userEmail)
    {
        try
        {
            var url = $"https://firebasestorage.googleapis.com/v0/b/stega-426008.appspot.com/o/users%2FUserStats%2F{userEmail}.json?alt=media";
            var response = await HttpClient.GetAsync(url);
            return response.IsSuccessStatusCode;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking email existence: {ex.Message}");
            return false;
        }
    }

    private async Task SaveUserProfileToStorage(User user)
    {
        var profileData = new
        {
            FirstName = signupModel.FirstName,
            LastName = signupModel.LastName,
            BirthDate = signupModel.BirthDate.ToString("yyyy-MM-dd"),
            City = signupModel.City,
            Gender = signupModel.Gender,
            Email = signupModel.Email,
            PhoneNumber = signupModel.PhoneNumber
        };

        var json = JsonSerializer.Serialize(profileData);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await HttpClient.PostAsync($"https://firebasestorage.googleapis.com/v0/b/stega-426008.appspot.com/o/users%2F{user.Uid}.json", content);

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception("Failed to save user profile.");
        }
    }
    private string GetErrorMessage(string responseBody)
    {
        try
        {
            var responseJson = JsonSerializer.Deserialize<JsonElement>(responseBody);
            var error = responseJson.GetProperty("error").GetProperty("message").GetString();
            return error switch
            {
                "EMAIL_EXISTS" => "The email address is already in use by another account.",
                "INVALID_EMAIL" => "The email address is invalid.",
                "WEAK_PASSWORD" => "The password is too weak. Please use at least 6 characters.",
                _ => "An error occurred during sign up. Please try again."
            };
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"Failed to parse JSON: {ex.Message}");
            return "An unexpected error occurred.";
        }
    }
    private int CalculateAge(DateTime birthDate)
    {
        var today = DateTime.Today;
        var age = today.Year - birthDate.Year;
        if (birthDate.Date > today.AddYears(-age)) age--;
        return age;
    }

    public class SignupModel
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public DateTime BirthDate { get; set; }
        public string City { get; set; }
        public string Gender { get; set; }
        public string PhoneNumber { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }
    public class CountryCode
    {
        public string Code { get; set; }
        public string Name { get; set; }
        public string Flag { get; set; }
    }
}
<style>
    .signup-container {
        max-width: 400px;
        margin: 50px auto;
        padding: 25px;
        border: 1px solid #ddd;
        border-radius: 10px;
        background-color: #ffffff;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        font-family: 'Arial', sans-serif;
    }

    .signup-container h3 {
        text-align: center;
        color: #4a4a4a;
        font-size: 1.8em;
        margin-bottom: 20px;
        font-weight: 600;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 15px;
    }

    .form-group label {
        font-weight: bold;
        color: #555;
        margin-bottom: 5px;
    }

    .form-group input,
    .form-group select {
        padding: 10px;
        font-size: 1rem;
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        width: 100%;
    }

    .form-group select {
        cursor: pointer;
        background-color: #f9f9f9;
    }

    .form-group input:focus,
    .form-group select:focus {
        border-color: #a882d6;
        outline: none;
        box-shadow: 0 0 5px rgba(168, 130, 214, 0.5);
    }

    .date-picker {
        display: flex;
        gap: 10px;
    }

    .date-picker select {
        flex: 1;
    }

    .signup-button {
        background-color: #556B2F; /* Ljuslila färg */
        color: #F0FFF0;
        border: none;
        padding: 12px 20px;
        font-size: 1rem;
        cursor: pointer;
        border-radius: 5px;
        transition: all 0.3s ease;
        width: 100%;
    }

    .signup-button:hover {
        background-color: #8b5fc1; /* Mörkare lila för hover */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        color: white;
    }

    .signup-button:disabled {
        background-color: #e3d7f1;
        cursor: not-allowed;
    }

    .signup-footer {
        text-align: center;
        margin-top: 15px;
        font-size: 0.9rem;
        color: #4a4a4a;
    }

    .signup-footer a {
        color: #8b5fc1;
        text-decoration: none;
        font-weight: 600;
    }

    .signup-footer a:hover {
        text-decoration: underline;
    }

    @@media (max-width: 480px) {
        .signup-container {
            padding: 15px;
            margin: 20px;
        }

        .form-group input,
        .form-group select {
            font-size: 0.9rem;
        }

        .signup-button {
            font-size: 0.9rem;
            padding: 10px 15px;
        }
    }
</style>
