@page "/"
@using Plugin.MauiMTAdmob
@using Plugin.MauiMTAdmob.Extra
@using lek4.Components.Pages
@inject NavigationManager NavigationManager
@inject lek4.Components.Service.NumberService NumberService
@inject GoogleFitService GoogleFitService
@inject UserService UserService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime

<div class="container" style="background-color: @(GetBackgroundColor())">
    <!-- Credits display in top-right corner -->
    <div class="credits-box">
        <div class="star-wrapper @starAnimationClass">
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
            <i class="fa-solid fa-carrot"></i>
        </div>
        <span class="credits-count">@credits</span>
    </div>


    <!-- Tre lager av förvrängda cirklar -->
    <div class="oval-background oval-background-layer1" style="background-color: @(GetNextColor())"></div>
    <div class="oval-background oval-background-layer2"></div>
    <div class="oval-background oval-background-layer3"></div>

    <div class="main-number-container">
        <div class="main-number @GetSizeClass() @explodeClass">
            @number.ToString("0.0x")
        </div>
        @if (ShouldShowLockIcon())
        {
            <i class="fas fa-lock lock-icon" @onclick="() => UnlockAd()"></i>
        }
        @if (adReadyToWatch)
        {
            <i class="fas fa-unlock unlock-icon visible" @onclick="ShowAd"></i>
        }
    </div>
    <div class="step-count">
        Steps: @steps
    </div>
</div>

<StepCounter OnStepsChanged="UpdateNumber" />

<div>
    <button @onclick="DecrementNumber">-</button>
    <span>@number.ToString("0.0")</span>
    <button @onclick="IncrementNumber">+</button>
</div>

<button @onclick="FetchStepsFromGoogleFit">Fetch Steps from Google Fit</button>
<button @onclick="ShowAd">Watch Ad</button> <!-- Button to show ad -->
<button @onclick="GoToAdminPage">Admin Page</button> <!-- Button to navigate to Admin Page -->

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert">@message</div>
}
<style>
   .credits-box {
    position: absolute;
    top: 10px;
    right: 10px;
    display: flex;
    align-items: center;
    background-color: #F0FFF0; /* Light yellow background */
    padding: 8px 12px;
    border-radius: 20px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    font-weight: bold;
    font-size: 16px;
    color: #333;
    z-index: 10;
}

.star-wrapper {
    position: relative;
    display: inline-block;
    margin-right: 8px;
}

.credits-icon {
    font-size: 20px;
        width: 20px; /* Adjust to fit the box */
        height: 20px;
        color: #ffca28; /* Gold color for icon */
}

    .credits-count {
        font-size: 16px;
        background-color: #F0FFF0; /* White background for circle */
        color: #333; /* Text color */
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%; /* Makes it a circle */
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
        font-size: 16px;
}

/* Animation class */
    .animate-star {
        animation: flyToRightSmooth 1.5s ease-in-out forwards; /* Increased duration for smoother effect */
    }

@@keyframes flyToRightSmooth {
    0% {
        transform: translateX(0);
        opacity: 1;
    }
    30% {
        transform: translateX(10px);
        opacity: 1;
    }
    60% {
        transform: translateX(20px);
        opacity: 0.8;
    }
    80% {
        transform: translateX(22px) scale(1.1);
        opacity: 0.6;
    }
    100% {
        transform: translateX(25px) scale(1.2);
        opacity: 0;
    }
}

</style>
@code {
    private int credits = 0; 
    private string starAnimationClass = "";// Display credits in the UI
    private double number
    {
        get => NumberService.Number;
        set
        {
            NumberService.Number = Math.Round(value, 1); // Ensure number is rounded to 1 decimal place
            CheckAndShowAd();
        }
    }
    private int steps = 0;
    private string explodeClass = string.Empty;
    private string message;
    private bool adWatched = false;
    private bool adReadyToWatch = false;
    private static readonly HashSet<double> AdTriggerPoints = new HashSet<double>
    {
        0.3, 0.6, 0.9,
        1.3, 1.6, 1.9,
        2.3, 2.6, 2.9,
        3.3, 3.6, 3.9,
        4.3, 4.6, 4.9,
        5.3, 5.6, 5.9,
        6.3, 6.6, 6.9,
        7.3, 7.6, 7.9,
        8.3, 8.6, 8.9,
        9.3, 9.6, 9.9
    };
    private const string RewardedAdUnitId = "ca-app-pub-3940256099942544/5224354917";

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        InitializeAds();

        // Fetch credits specifically for the credits display box
        await FetchCreditsForDisplay();
    }

    private async Task FetchCreditsForDisplay()
    {
        var email = await localStorage.GetItemAsync<string>("userEmail");

        if (string.IsNullOrEmpty(email))
        {
            Console.WriteLine("No email found in local storage.");
            credits = 0;
            return;
        }

        var user = await UserService.GetUserFromFirebase(email);
        var newCredits = user?.Credits ?? 0;

        // Check if credits have increased to trigger animation
        if (newCredits > credits)
        {
            TriggerStarAnimation();
        }

        credits = newCredits;
        StateHasChanged(); // Ensure UI updates
    }

    private void TriggerStarAnimation()
    {
        // Trigger animation class
        starAnimationClass = "animate-star";
        StateHasChanged();

        // Reset animation class after a short delay to allow re-triggering
        Task.Delay(1000).ContinueWith(_ =>
        {
            starAnimationClass = "";
            InvokeAsync(StateHasChanged);
        });
    }
    private async void UnlockAd()
    {
        adReadyToWatch = true;
        StateHasChanged();
        await Task.Delay(1000);
        ShowAd();

        // Retrieve email from localStorage
        var email = await localStorage.GetItemAsync<string>("userEmail");

        // Add credit to user upon unlocking the ad
        if (!string.IsNullOrEmpty(email))
        {
            await UserService.AddCreditToUser(email);

            // Fetch updated credits count for display
            await FetchCreditsForDisplay(); // Independent fetch after incrementing
        }
        else
        {
            Console.WriteLine("User email not found in localStorage.");
        }
    }

    private void InitializeAds()
    {
        CrossMauiMTAdmob.Current.OnRewardedLoaded += OnRewardedAdLoaded;
        CrossMauiMTAdmob.Current.OnRewardedFailedToLoad += OnRewardedAdFailedToLoad;
        CrossMauiMTAdmob.Current.OnRewardedFailedToShow += OnRewardedFailedToShow;
        CrossMauiMTAdmob.Current.OnRewardedOpened += OnRewardedOpened;
        CrossMauiMTAdmob.Current.OnRewardedClosed += OnRewardedClosed;
        CrossMauiMTAdmob.Current.OnRewardedImpression += OnRewardedImpression;
        CrossMauiMTAdmob.Current.OnUserEarnedReward += OnUserEarnedReward;
    }
    private string[] colorSequence = new string[]
      {
        "#98FB98", // PaleGreen
        "#FF1493", // DeepPink
        "#cc99ff", // LightPurple
        "#7FFF00", // Chartreuse
        "#FFFF00", // Yellow
        "#ffcc99", // Peach
        "#ffff99", // LightYellow
        "#99ccff", // LightBlue
        "#99ff99"  // LightGreen
      };

    private string GetNextColor()
    {
        int colorIndex = Math.Min((int)number, colorSequence.Length - 1);
        return colorSequence[colorIndex];
    }

    private void OnRewardedImpression(object sender, EventArgs e)
    {
        Console.WriteLine("On Reward Impression");
    }

    private void OnRewardedClosed(object sender, EventArgs e)
    {
        Console.WriteLine("On Reward Closed");
        adReadyToWatch = false;
        StateHasChanged();
    }

    private void OnRewardedOpened(object sender, EventArgs e)
    {
        Console.WriteLine("On Reward Opened");
    }

    private void OnUserEarnedReward(object sender, MTEventArgs e)
    {
        Console.WriteLine($"User Earned Reward: {e.RewardType} - {e.RewardAmount}");
        adWatched = true;
        adReadyToWatch = false;
        StateHasChanged(); // Update the UI to reflect the change
    }

    private void OnRewardedFailedToShow(object sender, MTEventArgs e)
    {
        Console.WriteLine($"Reward Failed To Show: {e.ErrorCode} - {e.ErrorMessage}");
    }

    private void OnRewardedAdLoaded(object sender, EventArgs e)
    {
        Console.WriteLine("Rewarded Ad Loaded");
        adReadyToWatch = true;
        StateHasChanged(); // Update the UI to reflect the change
    }

    private void OnRewardedAdFailedToLoad(object sender, MTEventArgs e)
    {
        Console.WriteLine($"Rewarded Ad Failed To Load: {e.ErrorCode} - {e.ErrorMessage}");
    }

    private void UpdateNumber(int stepCount)
    {
        steps = stepCount;
        number = Math.Round(steps / 1000.0, 1);
        TriggerExplosionEffect();
    }

    private void TriggerExplosionEffect()
    {
        explodeClass = "explode";
        StateHasChanged();
        Task.Delay(600).ContinueWith(_ =>
        {
            explodeClass = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task FetchStepsFromGoogleFit()
    {
        try
        {
            await GoogleFitService.InitializeServiceAsync();
            DateTime startDate = DateTime.Now.AddDays(-7);
            DateTime endDate = DateTime.Now;
            steps = await GoogleFitService.GetTotalStepsAsync(startDate, endDate);
            UpdateNumber(steps);
            message = $"Total steps in the last week: {steps}";
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    public string GetProductUrl()
    {
        return $"/products/{number:F1}";
    }

    private string GetBackgroundColor()
    {
        if (number >= 9.0) return "#98FB98"; // PaleGreen
        if (number >= 8.0) return "#FF1493"; // DeepPink
        if (number >= 7.0) return "#cc99ff"; // LightPurple
        if (number >= 6.0) return "#7FFF00"; // Chartreuse
        if (number >= 5.0) return "#FFFF00"; // Yellow
        if (number >= 4.0) return "#ffcc99"; // Peach
        if (number >= 3.0) return "#ffff99"; // LightYellow
        if (number >= 2.0) return "#99ccff"; // LightBlue
        if (number >= 1.0) return "#99ff99"; // LightGreen
        return "#ffffff"; // White
    }

    private string GetSizeClass()
    {
        if (number >= 9.0) return "size-9";
        if (number >= 8.0) return "size-8";
        if (number >= 7.0) return "size-7";
        if (number >= 6.0) return "size-6";
        if (number >= 5.0) return "size-5";
        if (number >= 4.0) return "size-4";
        if (number >= 3.0) return "size-3";
        if (number >= 2.0) return "size-2";
        if (number >= 1.0) return "size-1";
        return "size-0";
    }

    private void IncrementNumber()
    {
        if (ShouldShowLockIcon())
        {
            // Do not increment the number if the lock icon is displayed
            message = "Please watch the ad to continue.";
            return;
        }

        number = Math.Min(number + 0.1, 9.0);
        Console.WriteLine($"Number incremented to: {number}");
        adWatched = false; // Reset flag if number reaches 0.4, 0.9, 1.4, etc.
    }

    private void DecrementNumber()
    {
        number = Math.Max(number - 0.1, 0.0);
        Console.WriteLine($"Number decremented to: {number}");
    }

    private void GoToProducts()
    {
        NavigationManager.NavigateTo(GetProductUrl());
    }

    private void CheckAndShowAd()
    {
        Console.WriteLine($"Checking if ad should be shown for number: {number}");
        // No need to show ad automatically
    }

    private void ShowAd()
    {
        ((MainPage)Application.Current.MainPage).LoadRewardedAd();
    }
    private void GoToAdminPage()
    {
        NavigationManager.NavigateTo("/admin"); // Replace with the correct route to your Admin page
    }

    private bool ShouldShowLockIcon()
    {
        // Check if the rounded number is in the list of trigger points
        return !adWatched && AdTriggerPoints.Contains(number) && !adReadyToWatch;
    }

    private bool ShouldShowUnlockIcon()
    {
        // Show unlock icon if ad is ready to watch
        return adReadyToWatch;
    }
}
