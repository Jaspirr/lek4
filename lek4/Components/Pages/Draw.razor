@page "/draw"
@using lek4.Components.Service

@inject DrawService DrawService
@inject ProductService ProductService

<h3>Draw Page</h3>

<div class="product-draw">
    @if (productNumbers != null)
    {
        @foreach (var productNumber in productNumbers)
        {
            <div class="product-info">
                <h4>Product @productNumber</h4>

                <!-- Display winner if available, otherwise "No winner yet" -->
                <p><strong>Winner: @(winners.ContainsKey(productNumber) ? winners[productNumber] : "No winner yet")</strong></p>

                <!-- Button to draw a winner -->
                <button @onclick="() => DrawWinnerAndSaveToFirebase(productNumber)" class="draw-winner-button">Draw Winner</button>

                <!-- Button to fetch and display the winner -->
                <button @onclick="() => FetchWinnerFromFirebase(productNumber)" class="fetch-winner-button">Fetch Winner</button>
            </div>
        }
    }
    else
    {
        <p>Loading products...</p>
    }
</div>

@code {
    private List<int> productNumbers = new List<int>();
    private Dictionary<int, string> winners = new Dictionary<int, string>();

    protected override async Task OnInitializedAsync()
    {
        // Fetch all products, then extract the product numbers
        var products = await ProductService.FetchAllProductsFromFirebaseAsync();

        // Extract product numbers from the fetched product data
        productNumbers = products.Select(p => p.ProductNumber).ToList();

        // Initialize winners dictionary for each product number
        foreach (var productNumber in productNumbers)
        {
            winners[productNumber] = "No winner yet"; // Initialize with no winner
        }
    }

    // Fetch emails, lock-in amounts, draw winner, and save to Firebase
    private async Task DrawWinnerAndSaveToFirebase(int productNumber)
    {
        try
        {
            // Attempt to draw the winner using DrawService
            var winner = await DrawService.DrawWinnerAsync(productNumber);

            if (!string.IsNullOrEmpty(winner)) // Ensure a valid winner is picked
            {
                winners[productNumber] = winner; // Update the UI with the drawn winner

                // Now save the winner to Firebase under winner.json
                await DrawService.SaveWinnerToFirebase(productNumber, winner);

                Console.WriteLine($"Winner {winner} for product {productNumber} drawn and saved successfully.");

                StateHasChanged(); // Trigger UI refresh to display the winner
            }
            else
            {
                Console.WriteLine($"No winner was drawn for product {productNumber}.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while drawing winner for product {productNumber}: {ex.Message}");
        }
    }

    // Fetch the winner from Firebase using DrawService
    private async Task FetchWinnerFromFirebase(int productNumber)
    {
        try
        {
            // Fetch winner from Firebase using ProductService
            var winner = await ProductService.GetWinnerFromFirebase(productNumber);
            winners[productNumber] = winner ?? "No winner yet";

            if (winner != null)
            {
                Console.WriteLine($"Fetched winner for product {productNumber}: {winner}");
            }
            else
            {
                Console.WriteLine($"No winner found for product {productNumber}");
            }

            StateHasChanged(); // Trigger UI refresh to display the winner
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while fetching winner for product {productNumber}: {ex.Message}");
        }
    }
}


<style>
    .product-draw {
        display: grid;
        grid-template-columns: repeat(3, 1fr); /* 3 columns */
        gap: 20px;
        padding: 20px;
    }

    .product-info {
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
        background-color: #f9f9f9;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    }

        .product-info h4 {
            margin-bottom: 10px;
            font-size: 1.2em;
            color: #333;
        }

        .product-info p {
            margin-bottom: 5px;
            font-size: 1em;
            color: #555;
        }

        .product-info button {
            margin-top: 10px;
            padding: 5px 10px; /* Make buttons smaller */
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em; /* Smaller text */
            transition: background-color 0.3s ease;
        }

            .product-info button:hover {
                background-color: #45a049;
            }

    .draw-winner-button {
        background-color: #f44336; /* Red button for drawing a winner */
    }

        .draw-winner-button:hover {
            background-color: #d32f2f;
        }

    .fetch-winner-button {
        background-color: #4CAF50; /* Green button for fetching the winner */
    }

        .fetch-winner-button:hover {
            background-color: #388E3C;
        }
</style>
