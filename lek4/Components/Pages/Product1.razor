@page "/product/{productNumber:int}"

@inject NavigationManager NavigationManager
@inject lek4.Components.Service.NumberService NumberService

@code {
    [Parameter]
    public int productNumber { get; set; }

    private double price;
    private double winningChance;
    private double lockInAmount;
    private double totalOdds;
    private double lockedInOdds;
    private string errorMessage;
    private bool isSuccess;
    private bool exceedsTotalOdds;

    protected override void OnParametersSet()
    {
        price = productNumber * 10; // Exempel: Priset ökar med 10 för varje produkt
        NumberService.UnlockProduct(productNumber); // Lås upp produkten när den öppnas
        winningChance = NumberService.GetWinningChance(productNumber); // Get winning chance
        totalOdds = NumberService.GetRemainingOdds(); // Get total odds
        lockedInOdds = NumberService.ProductLockAmounts.ContainsKey(productNumber)
            ? NumberService.ProductLockAmounts[productNumber].Sum()
            : 0;
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo($"/products/{NumberService.CurrentNumber:F1}");
    }

    private void LockInPrice()
    {
        if (lockInAmount > 0 && lockInAmount <= 9.0)
        {
            if (NumberService.HasEnoughOdds(lockInAmount))
            {
                NumberService.LockInProduct(productNumber, lockInAmount);
                lockedInOdds += lockInAmount; // Uppdatera locked in odds
                isSuccess = true;
                errorMessage = null;
                GoBack();
            }
            else
            {
                isSuccess = false;
                errorMessage = "You don't have enough odds.";
            }
        }
        else
        {
            isSuccess = false;
            errorMessage = "Please enter a value between 0.0 and 9.0.";
        }
    }

    private void OnSliderChanged(ChangeEventArgs e)
    {
        lockInAmount = Convert.ToDouble(e.Value);
        exceedsTotalOdds = lockInAmount > totalOdds;
    }
}

<div class="product-details">
    <button @onclick="GoBack" class="icon-button">
        <i class="fas fa-arrow-left"></i> <!-- Tillbaka ikon -->
    </button>
    <h3>Price: $@price</h3>
    <p>Chance: @winningChance%</p> <!-- Display winning chance -->
    <p>Odds: @totalOdds</p> <!-- Display total odds -->
    <p>Locked In: @lockedInOdds</p> <!-- Display locked in odds -->
    <input type="range" min="0.0" max="9.0" step="0.1" value="@lockInAmount" @oninput="OnSliderChanged" class="slider" />
    <p>Selected Amount: @lockInAmount</p>
    <button @onclick="LockInPrice" class="lock-in-button @(isSuccess ? "success" : (string.IsNullOrEmpty(errorMessage) ? (exceedsTotalOdds ? "exceeds" : "") : "error"))">LOCK IN</button>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="error-message">@errorMessage</p>
    }
</div>

<style>
    .product-details {
        text-align: center;
        margin: 100px 20px 0px 20px;
        padding: 20px;
        border: 1px solid #ddd;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        transition: box-shadow 0.3s ease-in-out;
    }

        .product-details:hover {
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

        .product-details h3 {
            font-size: 2em;
            margin-bottom: 20px;
            color: #333;
        }

        .product-details p {
            font-size: 1.5em;
            margin-bottom: 20px;
            color: #666;
        }

        .product-details button {
            padding: 10px 20px;
            font-size: 1em;
            margin: 5px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
        }

            .product-details button:hover {
                background-color: mediumpurple;
                color: white;
            }

    .lock-in-button {
        background-color: mediumpurple; /* Mediumpurple färg */
        color: white;
    }

        .lock-in-button:hover {
            background-color: rebeccapurple;
        }

        .lock-in-button.success {
            background-color: #28a745; /* Grön färg */
        }

        .lock-in-button.error, .lock-in-button.exceeds {
            background-color: red; /* Röd färg */
        }

    .icon-button {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 1.5em;
        position: absolute;
        top: 15px;
        left: 8px;
    }

    input[type="range"].slider {
        -webkit-appearance: none;
        width: 100%;
        height: 5px;
        background: silver;
        outline: none;
        opacity: 0.7;
        transition: opacity .2s;
        background: linear-gradient(to right, mediumpurple 0%, mediumpurple var(--value), silver var(--value), silver 100%);
    }

        input[type="range"].slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            background: mediumpurple;
            cursor: pointer;
            border-radius: 50%;
        }

        input[type="range"].slider::-moz-range-thumb {
            width: 20px;
            height: 20px;
            background: mediumpurple;
            cursor: pointer;
            border-radius: 50%;
        }

    .error-message {
        color: red;
        font-size: 1em;
        margin-top: 10px;
    }

    .success-message {
        color: green;
        font-size: 1em;
        margin-top: 10px;
    }
</style>

<script>
    document.addEventListener('input', function (event) {
        if (event.target.classList.contains('slider')) {
            event.target.style.setProperty('--value', (event.target.value - event.target.min) / (event.target.max - event.target.min) * 100 + '%');
        }
    }, false);
</script>
