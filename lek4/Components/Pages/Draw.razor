@page "/draw"
@using lek4.Components.Service

@inject DrawService DrawService
@inject ProductService ProductService

<h3>Draw Page</h3>

<div class="product-draw">
    @if (productNumbers != null)
    {
        @foreach (var productNumber in productNumbers)
        {
            <div class="product-info">
                <h4>Product @productNumber</h4>

                @if (GetTimeRemaining(productNumber).TotalSeconds <= 0)
                {
                    <p><strong>Winner: @(winners.ContainsKey(productNumber) ? winners[productNumber] : "No winner yet")</strong></p>
                }
                else
                {
                    <button @onclick="() => DrawWinnerAndRefresh(productNumber)">Draw Winner</button>
                }
            </div>
        }
    }
    else
    {
        <p>Loading products...</p>
    }
</div>

@code {
    private List<int> productNumbers;
    private Dictionary<int, string> winners = new Dictionary<int, string>();

    protected override async Task OnInitializedAsync()
    {
        // Fetch the product numbers when the page initializes
        productNumbers = await ProductService.GetProductNumbersFromFirebaseAsync();

        // Preload any winners if necessary
        foreach (var productNumber in productNumbers)
        {
            winners[productNumber] = await DrawService.DrawWinnerAsync(productNumber) ?? "No winner yet";
        }
    }

    private TimeSpan GetTimeRemaining(int productNumber)
    {
        // Use ProductService to get remaining time for each product
        return ProductService.GetTimeRemaining(productNumber);
    }

    private async Task DrawWinnerAndRefresh(int productNumber)
    {
        // Draw the winner for the specific product
        await DrawService.DrawWinnerAsync(productNumber);

        // Update the UI with the new winner
        winners[productNumber] = await DrawService.DrawWinnerAsync(productNumber);
        StateHasChanged(); // Trigger UI refresh
    }
}

<style>
    .product-draw {
        display: grid;
        grid-template-columns: repeat(3, 1fr); /* 3 columns */
        gap: 20px;
        padding: 20px;
    }

    .product-info {
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
    }

        .product-info h4 {
            margin-bottom: 10px;
        }

        .product-info p {
            margin-bottom: 5px;
        }
</style>
