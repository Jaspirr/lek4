@page "/products"
@page "/products/{number:double}"
@using lek4.Components.Service

@inject NavigationManager NavigationManager
@inject lek4.Components.Service.NumberService NumberService
@inject lek4.Components.Service.ProductService ProductService
@inject IJSRuntime JS

@code {
    [Parameter]
    public double? number { get; set; }

    private List<ProductService.ProductData> products = new List<ProductService.ProductData>();
    private int unlockingProduct = -1;
    private double remainingOdds;

    protected override async Task OnInitializedAsync()
    {
        if (!number.HasValue)
        {
            number = NumberService.Number;
        }

        NumberService.Number = number.Value;
        remainingOdds = Math.Min(NumberService.GetRemainingOdds(), 100.0);

        // Hämta produkterna från Firebase
        await FetchProductsFromFirebase();

        // Hämta vinnaren för varje produkt och uppdatera UI
        await FetchWinner();
    }

    private async Task FetchProductsFromFirebase()
    {
        products = await ProductService.FetchAllProductsFromFirebaseAsync();
    }

    private async Task FetchWinner()
    {
        foreach (var product in products)
        {
            // Hämtar vinnaren från Firebase för varje produkt
            product.Winner = await ProductService.GetWinnerFromFirebase(product.ProductNumber);
        }

        StateHasChanged(); // Uppdaterar UI när vinnaren har hämtats
    }

    private async Task GoToProduct(int productNumber)
    {
        unlockingProduct = productNumber;
        StateHasChanged();

        await JS.InvokeVoidAsync("triggerAnimation", $"product-{productNumber}");

        await Task.Delay(800);

        NumberService.UnlockProduct(productNumber);
        NavigationManager.NavigateTo($"/product/{productNumber}");
    }

    private string GetProductClass(ProductService.ProductData product)
    {
        return !string.IsNullOrEmpty(product.Winner) ? "product gold" :
               NumberService.IsProductLockedIn(product.ProductNumber) ? "product locked-in" : "product locked";
    }

    private string GetIconClass(ProductService.ProductData product)
    {
        return !string.IsNullOrEmpty(product.Winner) ? "fas fa-coins" :
               NumberService.IsProductUnlocked(product.ProductNumber) ? "fas fa-unlock" : "fas fa-lock";
    }
}

<div class="product-grid">
    @foreach (var product in products)
    {
        <div id="product-@product.ProductNumber" class="@GetProductClass(product) @(unlockingProduct == product.ProductNumber ? "unlocking" : "")" style="background-image: url('@product.ImageUrl');">
            <a @onclick="async () => await GoToProduct(product.ProductNumber)">
                <div class="icon-wrapper">
                    @if (!string.IsNullOrEmpty(product.Winner))
                    {
                        <!-- Stjärn- och diamantikoner för vinnande produkter -->
                        <i class="fas fa-trophy winner-trophy-icon"></i>
                    }
                    else
                    {
                        <!-- Standard ikon för andra produkter -->
                        <i class="@GetIconClass(product)"></i>
                    }
                </div>
            </a>
        </div>
    }
</div>


<script>
    function triggerAnimation(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
            element.classList.remove("unlocking");
            void element.offsetWidth; // För att tvinga omritning
            element.classList.add("unlocking");
        }
    }
</script>
