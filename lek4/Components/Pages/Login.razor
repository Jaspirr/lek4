@page "/login"
@using Firebase.Auth
@using System.Text.Json
@inject FirebaseAuthClient AuthClient
@inject NavigationManager NavigationManager

<div class="login-container">
    <div class="login-form">
        <h3 class="login-title">Login</h3>
        <EditForm Model="loginModel" OnValidSubmit="LoginUser">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <InputText id="email" @bind-Value="loginModel.Email" placeholder="Email" />
            </div>
            <div class="form-group">
                <InputText id="password" @bind-Value="loginModel.Password" type="password" placeholder="Password" />
            </div>
            <button type="submit" class="login-button">Login</button>
            <div class="error-message">
                @errorMessage
            </div>
            <p>Don't have an account? <NavLink href="/signup">Sign up here</NavLink></p>
            <p>Are you an Admin? <NavLink href="/admin-login">Log in as Admin here</NavLink></p>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private async Task LoginUser()
    {
        try
        {
            var userCredential = await AuthClient.SignInWithEmailAndPasswordAsync(loginModel.Email, loginModel.Password);
            await Application.Current.MainPage.DisplayAlert("Success", "Successfully logged in!", "Ok");
            NavigationManager.NavigateTo("/"); // Replace with your actual home page route
        }
        catch (Exception ex)
        {
            errorMessage = GetErrorMessage(ex.Message);
            await Application.Current.MainPage.DisplayAlert("Error", errorMessage, "Ok");
        }
    }

    private string GetErrorMessage(string responseBody)
    {
        try
        {
            var responseJson = JsonSerializer.Deserialize<JsonElement>(responseBody);
            var error = responseJson.GetProperty("error").GetProperty("message").GetString();
            return error switch
            {
                "EMAIL_NOT_FOUND" => "The user does not exist. Please check your email or sign up.",
                "INVALID_PASSWORD" => "The password is invalid. Please try again.",
                "USER_DISABLED" => "The user account has been disabled.",
                _ => "An error occurred during login. Please try again."
            };
        }
        catch
        {
            return "An error occurred during login. Please try again.";
        }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f5f5f5;
    }

    .login-form {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .form-group {
        margin-bottom: 15px;
        text-align: left;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
        }

        .form-group input {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
        }

    .login-title {
        margin-bottom: 20px;
        font-size: 24px;
        color: mediumpurple;
    }

    .login-button {
        width: 100%;
        padding: 10px;
        background-color: mediumpurple;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .login-button:hover {
            background-color: rebeccapurple;
        }

    .error-message {
        color: red;
        margin-top: 10px;
    }
</style>
