@page "/product/{productNumber:int}"

@inject NavigationManager NavigationManager
@inject lek4.Components.Service.NumberService NumberService
@inject lek4.Components.Service.ProductService ProductService
@inject FirebaseAuthClient FirebaseAuthClient
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DrawService DrawService

@using System.Security.Claims
@using Firebase.Auth
@using Microsoft.AspNetCore.Components.Authorization
@using Plugin.MauiMTAdmob
@using Plugin.MauiMTAdmob.Extra
@using lek4.Components.Service

@code {
    [Parameter]
    public int productNumber { get; set; }

    private double price;
    private double winningChance;
    private double lockInAmount;
    private double totalOdds = 1.0;
    private double lockedInOdds;
    private string errorMessage;
    private bool isSuccess;
    private bool exceedsTotalOdds;
    private string timeRemaining;
    private Timer timer;
    private bool shouldLockIn = false;
    private bool adReadyToWatch = false;
    private bool adWatched = false;
    private DayOfWeek selectedDay = DayOfWeek.Monday;
    private bool productExists = true;
    private TimeSpan remainingTime;
    private string winner;
    private bool showPopup = false;
    private string userEmail;
    private ProductService.ProductData productData;
    private string providedKey = "some-key"; // Replace with actual key logic

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check if the user is authenticated
        if (user.Identity.IsAuthenticated)
        {
            userEmail = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
        }
        else
        {
            userEmail = null;
        }

        // Fetch product data from Firebase
        productData = await ProductService.GetProductFromFirebaseAsync(productNumber);

        if (productData != null)
        {
            productExists = true;
            price = productData.Price;
            lockInAmount = productData.LockInAmount;
            // You can also fetch and set other product-related data here
        }
        else
        {
            productExists = false;
            errorMessage = "This Product is not active";
            NavigationManager.NavigateTo("/products");
            return;
        }

        // Initialize ads and timer
        InitializeAds();
        timer = new Timer(UpdateTimer, null, 0, 1000);

        var remainingTime = ProductService.GetTimeRemaining(productNumber);
        if (remainingTime.TotalSeconds <= 0)
        {
            winner = await DrawService.GetWinnerAsync(productNumber); // Fetch winner using DrawService
        }
    }

    private void InitializeAds()
    {
        CrossMauiMTAdmob.Current.OnRewardedLoaded += OnRewardedAdLoaded;
        CrossMauiMTAdmob.Current.OnUserEarnedReward += OnUserEarnedReward;
        CrossMauiMTAdmob.Current.LoadRewarded("ca-app-pub-3940256099942544/5224354917"); // Replace with your actual ad ID
    }

    private void OnRewardedAdLoaded(object sender, EventArgs e)
    {
        adReadyToWatch = true;
        StateHasChanged();
    }

    private void OnUserEarnedReward(object sender, MTEventArgs e)
    {
        adWatched = true;
        CompleteLockInPrice();
    }

    private async Task LockInPrice()
    {
        if (!productExists) return;

        if (lockInAmount > 0 && lockInAmount <= 9.0)
        {
            if (NumberService.HasEnoughOdds(lockInAmount))
            {
                shouldLockIn = true;

                if (adReadyToWatch && !adWatched)
                {
                    ShowAd();
                }
                else if (adWatched)
                {
                    await SaveProductData();
                }
                else
                {
                    errorMessage = "Ad is not ready yet.";
                }
            }
            else
            {
                isSuccess = false;
                errorMessage = "You don't have enough odds.";
            }
        }
        else
        {
            isSuccess = false;
            errorMessage = "Please enter a value between 0.0 and 9.0.";
        }
    }

    private async Task SaveProductData()
    {
        if (!string.IsNullOrEmpty(userEmail))
        {
            await ProductService.SaveProductData(productNumber, userEmail, lockInAmount, price);
            NumberService.LockInProduct(productNumber, userEmail, lockInAmount);
            await ProductService.LockInUser(productNumber, userEmail, providedKey); // Pass the providedKey here
        }
        else
        {
            await ProductService.SaveProductData(productNumber, "Anonymous", lockInAmount, price);
            NumberService.LockInProduct(productNumber, "Anonymous", lockInAmount);
            await ProductService.LockInUser(productNumber, "Anonymous", providedKey); // Pass the providedKey here
        }

        lockedInOdds += lockInAmount;
        isSuccess = true;
        errorMessage = null;
        shouldLockIn = false;

        GoBack();
    }

    private void CompleteLockInPrice()
    {
        if (shouldLockIn)
        {
            SaveProductData().Wait();
        }
    }

    private void ShowAd()
    {
        if (adReadyToWatch)
        {
            CrossMauiMTAdmob.Current.ShowRewarded();
        }
        else
        {
            errorMessage = "Ad is not ready yet.";
            StateHasChanged();
        }
    }

    private void UpdateTimer(object state)
    {
        if (!productExists) return;

        var now = DateTime.Now;
        var nextDay = GetNextSelectedDayAt20();
        var timeSpan = nextDay - now;

        if (timeSpan.TotalSeconds <= 0)
        {
            nextDay = GetNextSelectedDayAt20();
            timeSpan = nextDay - now;

            // Call async method in a fire-and-forget manner using Task.Run
            Task.Run(async () =>
            {
                winner = await DrawService.GetWinnerAsync(productNumber); // Asynchronous call to GetWinnerAsync
                if (winner != null)
                {
                    showPopup = false;
                    InvokeAsync(StateHasChanged); // Update UI after the async task completes
                }
            });
        }

        timeRemaining = $"{timeSpan.Days}d {timeSpan.Hours}h {timeSpan.Minutes}m";
        InvokeAsync(StateHasChanged);
    }

    private DateTime GetNextSelectedDayAt20()
    {
        var today = DateTime.Today;
        var daysUntilSelectedDay = ((int)selectedDay - (int)today.DayOfWeek + 7) % 7;
        var nextSelectedDay = today.AddDays(daysUntilSelectedDay).AddHours(20);

        if (nextSelectedDay < DateTime.Now)
        {
            nextSelectedDay = nextSelectedDay.AddDays(7);
        }

        return nextSelectedDay;
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/products");
    }

    private void ViewWinner()
    {
        showPopup = true;
        StateHasChanged();
    }

    private async Task DrawWinner()
    {
        winner = await DrawService.GetWinnerAsync(productNumber); // Call the asynchronous method
        StateHasChanged(); // Refresh the UI after the winner is drawn
    }

    private void OnSliderChanged(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value.ToString(), out double value))
        {
            lockInAmount = value;
            exceedsTotalOdds = lockInAmount > totalOdds;
        }
    }
}

<div class="product-details">
    @if (!productExists)
    {
        <p>The product you are trying to view no longer exists.</p>
        <button @onclick="GoBack">Back to Products</button>
    }
    else
    {
        <button @onclick="GoBack" class="icon-button">
            <i class="fas fa-arrow-left"></i>
        </button>
        <h3>$@price</h3>
        <div class="stats-container">
            <div class="stat-item">
                <p class="stat-value">@winningChance.ToString("0.0")%</p>
            </div>
            <div class="stat-item">
                <p class="stat-value">@totalOdds.ToString("0.0")x</p>
            </div>
            <div class="stat-item">
                <p class="stat-value">@lockedInOdds.ToString("0.0")<i class="fas fa-lock stat-icon"></i></p>
            </div>
        </div>
        <input type="range" min="0.0" max="9.0" step="0.1" value="@lockInAmount" @oninput="OnSliderChanged" class="slider" />
        <p>Selected Amount: @lockInAmount</p>
        <button @onclick="LockInPrice" class="lock-in-button @(isSuccess ? "success" : (string.IsNullOrEmpty(errorMessage) ? (exceedsTotalOdds ? "exceeds" : "") : "error"))">LOCK IN</button>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error-message">@errorMessage</p>
        }

        @if (remainingTime.TotalSeconds <= 0)
        {
            @if (winner == null)
            {
                <button @onclick="ViewWinner">View Winner</button>
            }
            else
            {
                <p><strong>Winner: @winner</strong></p>
            }
        }

        @if (showPopup)
        {
            <div class="popup">
                <h4>Draw a Winner for Product @productNumber</h4>
                <button @onclick="DrawWinner">Draw</button>
                @if (winner != null)
                {
                    <p><strong>Winner: @winner</strong></p>
                }
                <button @onclick="() => showPopup = false">Close</button>
            </div>
        }

        <div class="countdown-timer">
            <h4>@selectedDay 20:00</h4>
            <p>@timeRemaining</p>
        </div>
    }
</div>


<style>
    .popup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        z-index: 1000;
    }

    .product-details {
        text-align: center;
        margin: 100px 20px 0px 20px;
        padding: 20px;
        border: 1px solid #ddd;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        position: relative;
        transition: box-shadow 0.3s ease-in-out;
    }

        .product-details:hover {
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

        .product-details h3 {
            font-size: 2em;
            margin-bottom: 20px;
            color: #333;
        }

        .product-details p {
            font-size: 1.5em;
            margin-bottom: 20px;
            color: #666;
        }

        .product-details button {
            padding: 10px 20px;
            font-size: 1em;
            margin: 5px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
        }

            .product-details button:hover {
                background-color: mediumpurple;
                color: white;
            }

    .lock-in-button {
        background-color: mediumpurple;
        color: white;
    }

        .lock-in-button:hover {
            background-color: rebeccapurple;
        }

        .lock-in-button.success {
            background-color: #28a745;
        }

        .lock-in-button.error, .lock-in-button.exceeds {
            background-color: red;
        }

    .icon-button {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 1.5em;
        position: absolute;
        top: 15px;
        left: 8px;
    }

    .stats-container {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .stat-item {
        background-color: mediumpurple;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        max-width: 85px;
        max-height: 60px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin: 5px;
    }

    .stat-value {
        font-size: 1.2em;
        margin: 0;
        color: black;
    }

    .stat-label {
        font-size: 0.9em;
        color: white;
    }

    .stat-icon {
        font-size: 0.7em;
        color: white;
    }

    input[type="range"].slider {
        -webkit-appearance: none;
        width: 100%;
        height: 5px;
        background: silver;
        outline: none;
        transition: opacity .2s;
        background: linear-gradient(to right, mediumpurple 0%, mediumpurple var(--value), silver var(--value), silver 100%);
    }

        input[type="range"].slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            background: mediumpurple;
            cursor: pointer;
            border-radius: 50%;
        }

        input[type="range"].slider::-moz-range-thumb {
            width: 20px;
            height: 20px;
            background: mediumpurple;
            cursor: pointer;
            border-radius: 50%;
        }

    .error-message {
        color: red;
        font-size: 1em;
        margin-top: 10px;
    }

    .success-message {
        color: green;
        font-size: 1em;
        margin-top: 10px;
    }

    .countdown-timer {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: mediumpurple;
        border: 1px solid mediumpurple;
        padding: 5px 10px;
        border-radius: 5px;
        color: white;
        font-size: 0.9em;
        text-align: center;
    }

        .countdown-timer h4 {
            margin: 0;
            font-size: 0.9em;
            font-weight: normal;
        }

        .countdown-timer p {
            margin: 0;
            color: white;
            font-size: 0.9em;
        }
</style>

<script>
    document.addEventListener('input', function (event) {
        if (event.target.classList.contains('slider')) {
            event.target.style.setProperty('--value', (event.target.value - event.target.min) / (event.target.max - event.target.min) * 100 + '%');
        }
    }, false);
</script>
