@page "/"
@using Plugin.MauiMTAdmob
@using Plugin.MauiMTAdmob.Extra
@inject NavigationManager NavigationManager
@inject lek4.Components.Service.NumberService NumberService
@inject GoogleFitService GoogleFitService
@inject IJSRuntime JSRuntime

<div class="container" style="background-color: @(GetBackgroundColor())">
    <div class="main-number-container">
        <div class="main-number @GetSizeClass() @explodeClass">
            @number.ToString("0.0x")
        </div>
        @if (ShouldShowLockIcon())
        {
            <i class="fas fa-lock lock-icon" @onclick="UnlockAd"></i>
        }
        @if (adReadyToWatch)
        {
            <i class="fas fa-unlock unlock-icon visible" @onclick="ShowAd"></i>
        }
    </div>
    <div class="step-count">
        Steps: @steps
    </div>
</div>

<StepCounter OnStepsChanged="UpdateNumber" />

<div>
    <button @onclick="DecrementNumber">-</button>
    <span>@number.ToString("0.0")</span>
    <button @onclick="IncrementNumber">+</button>
</div>

<button @onclick="FetchStepsFromGoogleFit">Fetch Steps from Google Fit</button>
<button @onclick="ShowAd">Watch Ad</button> <!-- Button to show ad -->

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert">@message</div>
}

@code {
    private double number
    {
        get => NumberService.CurrentNumber;
        set
        {
            NumberService.CurrentNumber = Math.Round(value, 1); // Ensure number is rounded to 1 decimal place
            CheckAndShowAd();
        }
    }
    private int steps = 0;
    private string explodeClass = string.Empty;
    private string message;
    private bool adWatched = false; // Track if the ad has been watched
    private bool adReadyToWatch = false; // Track if the ad is ready to watch
    private static readonly HashSet<double> AdTriggerPoints = new HashSet<double>
    {
        0.4, 0.9, 1.4, 1.9, 2.4, 2.9, 3.4, 3.9, 4.4, 4.9, 5.4, 5.9, 6.4, 6.9, 7.4, 7.9, 8.4, 8.9
    };
    private const string RewardedAdUnitId = "ca-app-pub-3940256099942544/5224354917"; // Replace with your actual ad unit ID

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InitializeAds();
    }

    private void InitializeAds()
    {
        CrossMauiMTAdmob.Current.OnRewardedLoaded += OnRewardedAdLoaded;
        CrossMauiMTAdmob.Current.OnRewardedFailedToLoad += OnRewardedAdFailedToLoad;
        CrossMauiMTAdmob.Current.OnRewardedFailedToShow += OnRewardedFailedToShow;
        CrossMauiMTAdmob.Current.OnRewardedOpened += OnRewardedOpened;
        CrossMauiMTAdmob.Current.OnRewardedClosed += OnRewardedClosed;
        CrossMauiMTAdmob.Current.OnRewardedImpression += OnRewardedImpression;
        CrossMauiMTAdmob.Current.OnUserEarnedReward += OnUserEarnedReward;
    }

    private void OnRewardedImpression(object sender, EventArgs e)
    {
        Console.WriteLine("On Reward Impression");
    }

    private void OnRewardedClosed(object sender, EventArgs e)
    {
        Console.WriteLine("On Reward Closed");
        adReadyToWatch = false;
        StateHasChanged();
    }

    private void OnRewardedOpened(object sender, EventArgs e)
    {
        Console.WriteLine("On Reward Opened");
    }

    private void OnUserEarnedReward(object sender, MTEventArgs e)
    {
        Console.WriteLine($"User Earned Reward: {e.RewardType} - {e.RewardAmount}");
        adWatched = true;
        adReadyToWatch = false;
        StateHasChanged(); // Update the UI to reflect the change
    }

    private void OnRewardedFailedToShow(object sender, MTEventArgs e)
    {
        Console.WriteLine($"Reward Failed To Show: {e.ErrorCode} - {e.ErrorMessage}");
    }

    private void OnRewardedAdLoaded(object sender, EventArgs e)
    {
        Console.WriteLine("Rewarded Ad Loaded");
        adReadyToWatch = true;
        StateHasChanged(); // Update the UI to reflect the change
    }

    private void OnRewardedAdFailedToLoad(object sender, MTEventArgs e)
    {
        Console.WriteLine($"Rewarded Ad Failed To Load: {e.ErrorCode} - {e.ErrorMessage}");
    }

    private void UpdateNumber(int stepCount)
    {
        steps = stepCount;
        number = Math.Round(steps / 1000.0, 1);
        TriggerExplosionEffect();
    }

    private void TriggerExplosionEffect()
    {
        explodeClass = "explode";
        StateHasChanged();
        Task.Delay(600).ContinueWith(_ =>
        {
            explodeClass = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task FetchStepsFromGoogleFit()
    {
        try
        {
            await GoogleFitService.InitializeServiceAsync();
            DateTime startDate = DateTime.Now.AddDays(-7);
            DateTime endDate = DateTime.Now;
            steps = await GoogleFitService.GetTotalStepsAsync(startDate, endDate);
            UpdateNumber(steps);
            message = $"Total steps in the last week: {steps}";
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    public string GetProductUrl()
    {
        return $"/products/{number:F1}";
    }

    private string GetBackgroundColor()
    {
        if (number >= 9.0) return "#98FB98"; // PaleGreen
        if (number >= 8.0) return "#FF1493"; // DeepPink
        if (number >= 7.0) return "#cc99ff"; // LightPurple
        if (number >= 6.0) return "#7FFF00"; // Chartreuse
        if (number >= 5.0) return "#FFFF00"; // Yellow
        if (number >= 4.0) return "#ffcc99"; // Peach
        if (number >= 3.0) return "#ffff99"; // LightYellow
        if (number >= 2.0) return "#99ccff"; // LightBlue
        if (number >= 1.0) return "#99ff99"; // LightGreen
        return "#ffffff"; // White
    }

    private string GetSizeClass()
    {
        if (number >= 9.0) return "size-9";
        if (number >= 8.0) return "size-8";
        if (number >= 7.0) return "size-7";
        if (number >= 6.0) return "size-6";
        if (number >= 5.0) return "size-5";
        if (number >= 4.0) return "size-4";
        if (number >= 3.0) return "size-3";
        if (number >= 2.0) return "size-2";
        if (number >= 1.0) return "size-1";
        return "size-0";
    }

    private void IncrementNumber()
    {
        if (ShouldShowLockIcon())
        {
            // Do not increment the number if the lock icon is displayed
            message = "Please watch the ad to continue.";
            return;
        }

        number = Math.Min(number + 0.1, 9.0);
        Console.WriteLine($"Number incremented to: {number}");
        adWatched = false; // Reset flag if number reaches 0.4, 0.9, 1.4, etc.
    }

    private void DecrementNumber()
    {
        number = Math.Max(number - 0.1, 0.0);
        Console.WriteLine($"Number decremented to: {number}");
    }

    private void GoToProducts()
    {
        NavigationManager.NavigateTo(GetProductUrl());
    }

    private void CheckAndShowAd()
    {
        Console.WriteLine($"Checking if ad should be shown for number: {number}");
        // No need to show ad automatically
    }

    private void ShowAd()
    {
        ((MainPage)Application.Current.MainPage).LoadRewardedAd();
    }

    private async void UnlockAd()
    {
        adReadyToWatch = true;
        StateHasChanged();
        await Task.Delay(1000); // Delay to allow the user to see the unlocked icon
        ShowAd(); // Show the ad after the delay
    }

    private bool ShouldShowLockIcon()
    {
        // Check if the rounded number is in the list of trigger points
        return !adWatched && AdTriggerPoints.Contains(number) && !adReadyToWatch;
    }

    private bool ShouldShowUnlockIcon()
    {
        // Show unlock icon if ad is ready to watch
        return adReadyToWatch;
    }
}
