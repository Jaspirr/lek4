@page "/jackpot"
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject lek4.Components.Service.JackpotService JackpotService
@inject UserService UserService

<h2>Jackpot</h2>
<p>Current Jackpot Amount: @jackpotAmount kr</p>

@if (!canParticipate)
{
    <p class="error-message">@errorMessage</p>
}
else
{
    <p>Your Credits: @userCredits</p>
    <button @onclick="JoinJackpot" class="join-button">Join Jackpot (100 credits)</button>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <p class="success-message">@successMessage</p>
}

@code {
    private double jackpotAmount;
    private double userCredits;
    private bool canParticipate;
    private string errorMessage;
    private string successMessage;
    private string currentUserEmail;
    private int productNumber = 1; // Ange ett produktnummer för jackpot om det är specifikt

    protected override async Task OnInitializedAsync()
    {
        currentUserEmail = await LocalStorage.GetItemAsync<string>("userEmail");

        if (string.IsNullOrEmpty(currentUserEmail))
        {
            errorMessage = "User not logged in.";
            return;
        }

        await LoadJackpotData();
    }

    private async Task LoadJackpotData()
    {
        userCredits = await JackpotService.GetUserCredits(currentUserEmail);
        canParticipate = userCredits >= 100;

        jackpotAmount = await JackpotService.GetJackpotAmount();
        double totalCredits = await UserService.GetTotalCredits(); // Hämta total credits från UserService

        // Om du vill inkludera totalCredits i jackpotAmount
        jackpotAmount += totalCredits;

        errorMessage = canParticipate ? null : "You need at least 100 credits to join the jackpot.";
    }


    private async Task JoinJackpot()
    {
        Console.WriteLine($"Försöker gå med i jackpot med användare: {currentUserEmail} och credits: {userCredits}");

        if (!canParticipate)
        {
            errorMessage = "Insufficient credits to participate.";
            return;
        }

        try
        {
            await JackpotService.JoinJackpot(currentUserEmail, productNumber);
            userCredits -= 100; // Minska credits efter att ha gått med i jackpotten
            jackpotAmount += 10; // Uppdatera jackpotbeloppet lokalt för att reflektera förändringen
            canParticipate = userCredits >= 100; // Kontrollera om användaren kan gå med igen

            successMessage = "You have successfully joined the jackpot!";
            errorMessage = null; // Rensa eventuella tidigare felmeddelanden

            Console.WriteLine("Lyckades gå med i jackpot, omdirigerar till biljettvalssidan.");

            // Omdirigera till biljettvalssidan
            NavigationManager.NavigateTo($"/jackpot/{productNumber}/select-ticket");
        }
        catch (Exception ex)
        {
            errorMessage = $"Kunde inte gå med i jackpot: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
}
