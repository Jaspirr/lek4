@page "/edit-product/{productNumber:int}"
@using lek4.Components.Service

@inject NavigationManager NavigationManager
@inject lek4.Components.Service.ProductService ProductService

<h3>Edit Product @productNumber</h3>

<div class="edit-product-form">
    <label for="price">Price</label>
    <input type="number" id="price" min="0" step="0.1" @bind="price" />

    <label for="lockInAmount">Lock-in Amount</label>
    <input type="number" id="lockInAmount" min="0" step="0.1" @bind="lockInAmount" />

    <label for="userEmail">User Email</label>
    <input type="email" id="userEmail" @bind="userEmail" />

    <label for="productName">Product Name</label>
    <input type="text" id="productName" @bind="productName" />

    <label for="productImageUrl">Product Image URL</label>
    <input type="text" id="productImageUrl" @bind="productImageUrl" />

    <div>
        <input type="checkbox" id="isJackpot" @bind="isJackpot" />
        <label for="isJackpot">Jackpot Product</label>
    </div>

    <button @onclick="SaveChanges">Save Changes</button>
</div>

@code {
    [Parameter]
    public int productNumber { get; set; }

    private double price;
    private double lockInAmount;
    private string userEmail;
    private string productName;
    private string productImageUrl;
    private bool isJackpot; // New field to hold the jackpot status
    private ProductService.ProductData productData;

    protected override async Task OnInitializedAsync()
    {
        // Fetch the product data from Firebase
        productData = await ProductService.GetProductFromFirebaseAsync(productNumber);

        if (productData != null)
        {
            // Set local values based on the fetched data
            price = productData.Price;
            lockInAmount = productData.LockInAmount;
            userEmail = productData.UserEmail;
            productName = productData.ProductName;
            productImageUrl = productData.ImageUrl;
            isJackpot = productData.IsJackpot; // Set initial jackpot status
        }
        else
        {
            Console.WriteLine("Product not found.");
            NavigationManager.NavigateTo("/change-products");
        }
    }

    private async Task SaveChanges()
    {
        if (productData != null)
        {
            // Update productData with new values
            productData.Price = price;
            productData.LockInAmount = lockInAmount;
            productData.UserEmail = userEmail;
            productData.ProductName = productName;
            productData.ImageUrl = productImageUrl;
            productData.IsJackpot = isJackpot; // Update jackpot status

            int userId = 1; // Assign unique ID as needed

            // Save the updated product info, including the jackpot status
            await ProductService.SaveProductData(productNumber, userEmail, lockInAmount, price, productName, productImageUrl, isJackpot);

            // Save the user data
            await ProductService.SaveUserToProduct(productNumber, userId, productData);

            // Navigate back to the products list
            NavigationManager.NavigateTo("/change-products");
        }
    }
}
