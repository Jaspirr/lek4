@page "/edit-product/{productNumber:int}"
@using lek4.Components.Service

@inject NavigationManager NavigationManager
@inject lek4.Components.Service.ProductService ProductService

<h3>Edit Product @productNumber</h3>

<div class="edit-product-form">
    <label for="price">Price</label>
    <input type="number" id="price" min="0" step="0.1" @bind="price" />

    <label for="lockInAmount">Lock-in Amount</label>
    <input type="number" id="lockInAmount" min="0" step="0.1" @bind="lockInAmount" />

    <label for="userEmail">User Email</label>
    <input type="email" id="userEmail" @bind="userEmail" />

    <label for="productName">Product Name</label>
    <input type="text" id="productName" @bind="productName" /> <!-- New input for product name -->

    <label for="productImageUrl">Product Image URL</label>
    <input type="text" id="productImageUrl" @bind="productImageUrl" /> <!-- New input for product image URL -->

    <button @onclick="SaveChanges">Save Changes</button>
</div>


@code {
    [Parameter]
    public int productNumber { get; set; }

    private double price;
    private double lockInAmount;
    private string userEmail;
    private string productName;      // New field for product name
    private string productImageUrl;  // New field for product image URL
    private ProductService.ProductData productData; // Holds the product data

    protected override async Task OnInitializedAsync()
    {
        // Fetch the product data from Firebase
        productData = await ProductService.GetProductFromFirebaseAsync(productNumber);

        if (productData != null)
        {
            // Set local values for price, lockInAmount, userEmail, productName, and productImageUrl based on the fetched data
            price = productData.Price;
            lockInAmount = productData.LockInAmount;
            userEmail = productData.UserEmail;
            productName = productData.ProductName;      // Set product name
            productImageUrl = productData.ImageUrl;     // Set product image URL
        }
        else
        {
            // Handle if the product does not exist
            Console.WriteLine("Product not found.");
            NavigationManager.NavigateTo("/change-products"); // Redirect back
        }
    }

    private async Task SaveChanges()
    {
        // Update the product data with new values
        if (productData != null)
        {
            // Update productData object with the new values from the form
            productData.Price = price;
            productData.LockInAmount = lockInAmount;
            productData.UserEmail = userEmail;
            productData.ProductName = productName;      // Update product name
            productData.ImageUrl = productImageUrl;     // Update product image URL

            // Assuming you need to define a userId, you can either generate it or provide a value
            int userId = 1; // You can set this to any unique value for the user

            // Use the updated SaveProductData method to save the updated product info including name and image URL
            await ProductService.SaveProductData(productNumber, userEmail, lockInAmount, price, productName, productImageUrl);

            // Save the user data with a unique userId
            await ProductService.SaveUserToProduct(productNumber, userId, productData);

            // After saving, navigate back to the products list
            NavigationManager.NavigateTo("/change-products");
        }
    }
}

