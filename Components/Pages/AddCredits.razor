@page "/admin-credits"
@using System.Text.Json
@using System.Text
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager



<h3>Admin: Update User Data</h3>
<button @onclick="NavigateBack">← Back</button>
<!-- User Email Input -->
<div class="admin-container">
    <div class="form-group">
        <label for="email">User Email:</label>
        <input type="text" id="email" @bind="userEmail" placeholder="Enter User Email" />
    </div>

    <!-- Updateable Fields -->
    <div class="form-group">
        <label for="credits">Credits:</label>
        <input type="number" id="credits" @bind="creditsToUpdate" />
    </div>

    <div class="form-group">
        <label for="starShards">Star Shards:</label>
        <input type="number" id="starShards" @bind="starShardsToUpdate" />
    </div>

    <div class="form-group">
        <label for="longestStreak">Longest Streak:</label>
        <input type="number" id="longestStreak" @bind="longestStreakToUpdate" />
    </div>

    <div class="form-group">
        <label for="stars">Stars:</label>
        <input type="number" id="stars" @bind="starsToUpdate" />
    </div>

    <!-- Update Button -->
    <button @onclick="UpdateUserData" class="action-button">Update User Data</button>
    <p>@message</p>
</div>

@code {
    private string userEmail;
    private int creditsToUpdate;
    private int starShardsToUpdate;
    private int longestStreakToUpdate;
    private int starsToUpdate;
    private string message;

    /// <summary>
    /// Metod för att uppdatera användardata i Firebase
    /// </summary>
    private async Task UpdateUserData()
    {
        if (string.IsNullOrWhiteSpace(userEmail))
        {
            message = "Please enter a valid email.";
            return;
        }

        try
        {
            // 🔗 Hämta användarens data från Firebase
            var userUrl = $"https://firebasestorage.googleapis.com/v0/b/stega-426008.appspot.com/o/users%2FUserStats%2F{Uri.EscapeDataString(userEmail)}.json?alt=media";
            var response = await HttpClient.GetAsync(userUrl);

            if (response.IsSuccessStatusCode)
            {
                // ✅ Deserialisera den existerande datan
                var json = await response.Content.ReadAsStringAsync();
                var userData = JsonSerializer.Deserialize<UserData>(json);

                // ✅ Uppdatera endast de fält som angivits
                if (creditsToUpdate > 0) userData.Credits += creditsToUpdate;
                if (starShardsToUpdate > 0) userData.StarShards = starShardsToUpdate;
                if (longestStreakToUpdate > 0) userData.DailyStreak.LongestStreak = longestStreakToUpdate;
                if (starsToUpdate > 0) userData.DailyStreak.Stars = starsToUpdate;

                // ✅ Serialisera tillbaka datan och skicka en PUT-förfrågan till Firebase
                var updatedJson = JsonSerializer.Serialize(userData, new JsonSerializerOptions { WriteIndented = true });
                var content = new StringContent(updatedJson, Encoding.UTF8, "application/json");
                var putResponse = await HttpClient.PostAsync(userUrl, content);

                if (putResponse.IsSuccessStatusCode)
                {
                    message = $"User data for {userEmail} successfully updated!";
                }
                else
                {
                    message = "Failed to update user data.";
                }
            }
            else
            {
                message = "User not found.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/admin");
    }
    /// <summary>
    /// Klassen som matchar Firebase-strukturen exakt
    /// </summary>
    public class UserData
    {
        public string UserEmail { get; set; }
        public double LockInAmount { get; set; }
        public int Credits { get; set; }
        public int StarShards { get; set; }
        public double TotalOdds { get; set; }
        public int WeeklyOdds { get; set; }
        public DailyStreak DailyStreak { get; set; } = new DailyStreak();
    }

    public class DailyStreak
    {
        public int CurrentStreak { get; set; }
        public int LongestStreak { get; set; }
        public int Stars { get; set; }
        public string LastLoginDate { get; set; }
    }
}

<style>
    .admin-container {
        max-width: 600px;
        margin: 20px auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            font-weight: bold;
        }

        .form-group input {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            width: 100%;
        }

    .action-button {
        background-color: #28a745;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .action-button:hover {
            background-color: #218838;
        }
</style>
