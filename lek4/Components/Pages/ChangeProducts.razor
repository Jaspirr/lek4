@page "/change-products"

@using static lek4.Components.Service.ProductService

@inject NavigationManager NavigationManager
@inject IJSRuntime js
@inject lek4.Components.Service.ProductService ProductService

<h3>Change Products</h3>

<div class="product-list">
    @if (products != null && products.Count > 0)
    {
        @foreach (var product in products)
        {
            <div class="product-item">
                <p>Product @product.ProductNumber</p>
                <p>Price: @product.Price</p>

                <!-- Display locked-in users for the product -->
                <p>Users:</p>
                <ul>
                    @if (lockedInUsers.ContainsKey(product.ProductNumber))
                    {
                        @foreach (var user in lockedInUsers[product.ProductNumber])
                        {
                            <li>@user.UserEmail - Locked in amount: @user.LockInAmount</li>
                        }
                    }
                </ul>

                <button @onclick="() => EditProduct(product.ProductNumber)">Edit Product</button>
                <button @onclick="() => RemoveProduct(product.ProductNumber)" class="remove-button">Remove</button>
            </div>
        }
    }
    else
    {
        <p>No products available.</p>
    }
</div>

<h3>Add New Product</h3>
<div class="add-product-form">
    <label for="newProductNumber">Product Number</label>
    <input type="number" id="newProductNumber" min="1" @bind="newProductNumber" />

    <label for="newProductPrice">Product Price</label>
    <input type="number" id="newProductPrice" min="0" step="0.01" @bind="newProductPrice" />

    <button @onclick="AddProduct">Add Product</button>
</div>
@code {
    private List<ProductData> products = new List<ProductData>();
    private int newProductNumber;
    private double newProductPrice;
    private string userEmail = "user@example.com"; // Placeholder, replace with actual user email if available
    private Dictionary<int, List<ProductData>> lockedInUsers = new Dictionary<int, List<ProductData>>();

    protected override async Task OnInitializedAsync()
    {
        // Fetch all products with their details from Firebase
        products = await ProductService.FetchAllProductsFromFirebaseAsync();
        await LoadLockedInUsersForAllProducts(); // Load the locked-in users for all products
        StateHasChanged(); // Refresh the UI after fetching data
    }

    private async Task LoadLockedInUsersForAllProducts()
    {
        foreach (var product in products) // products now contains full ProductData objects
        {
            // Fetch locked-in users for each product
            var users = await ProductService.GetUsersForProduct(product.ProductNumber);
            lockedInUsers[product.ProductNumber] = users;
        }
    }


    private async Task AddProduct()
    {
        if (newProductNumber > 0 && newProductPrice > 0)
        {
            // Define lockInAmount (since it's 0 initially)
            double lockInAmount = 0.0;

            // Save the new product info with required parameters
            await ProductService.SaveProductData(newProductNumber, userEmail, lockInAmount, newProductPrice);

            // Refresh product list after adding
            products = await ProductService.FetchAllProductsFromFirebaseAsync(); // Fetch all products again
            await LoadLockedInUsersForAllProducts(); // Load users for all products again

            // Reset fields
            newProductNumber = 0;
            newProductPrice = 0;
        }
    }

    private async Task RemoveProduct(int productNumber)
    {
        await ProductService.RemoveProductFromFirebase(productNumber); // Remove product from Firebase
        products = await ProductService.FetchAllProductsFromFirebaseAsync(); // Refresh product list
        await LoadLockedInUsersForAllProducts(); // Load users for all products again
        StateHasChanged(); // Update UI
    }


    private void EditProduct(int productNumber)
    {
        if (products.Any(p => p.ProductNumber == productNumber))
        {
            NavigationManager.NavigateTo($"/edit-product/{productNumber}");
        }
        else
        {
            NavigationManager.NavigateTo("/change-products");
        }
    }
}


<style>
    .product-list {
        margin-top: 20px;
    }

    .product-item {
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        display: flex;
        flex-direction: column;
        align-items: start;
    }

    .remove-button {
        background-color: red;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
    }

        .remove-button:hover {
            background-color: darkred;
        }

    .add-product-form {
        margin-top: 30px;
    }

    input[type="number"] {
        margin-right: 10px;
        padding: 5px;
        width: 80px;
    }

    button {
        padding: 5px 10px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        button:hover {
            background-color: #45a049;
        }
</style>
