@page "/admin-prizes"
@using System.Text.Json
@using System.Text
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Admin Prizes Management</h3>
<!-- Back Button -->
<button class="back-button" @onclick="NavigateBack">← Back</button>
<div class="admin-container">
    @if (allWinnersGroupedByFile == null)
    {
        <p>Loading winners...</p>
    }
    else if (!allWinnersGroupedByFile.Any())
    {
        <p class="no-data-message">No winners found.</p>
    }
    else
    {
        @foreach (var group in allWinnersGroupedByFile)
        {
            <div class="winner-card">
                <h4>@GetDrawName(group.Key)</h4>
                <p class="total-credits">
                    🎉 <strong>Total Credits Awarded:</strong> @group.Value.Count(w => w.Prize == "Credits")
                </p>

                <div class="winner-list">
                    <h5>Individual Winners</h5>
                    @foreach (var winner in group.Value)
                    {
                        <div class="winner-item">
                            <p><strong>Email:</strong> @winner.UserEmail</p>
                            <p><strong>Prize:</strong> @winner.Prize</p>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

@code {
    private Dictionary<string, List<Winner>> allWinnersGroupedByFile;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllWinners();
    }

    private async Task LoadAllWinners()
    {
        try
        {
            allWinnersGroupedByFile = new Dictionary<string, List<Winner>>();
            var fileNames = await GetAllFileNames();

            foreach (var fileName in fileNames)
            {
                await FetchWinnersFromFile(fileName);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading winners: {ex.Message}");
        }
    }

    private async Task<List<string>> GetAllFileNames()
    {
        var fileNames = new List<string>();

        try
        {
            var response = await HttpClient.GetAsync("https://firebasestorage.googleapis.com/v0/b/stega-426008.appspot.com/o?prefix=users%2FSavedInfo%2F&alt=media");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var filesData = JsonSerializer.Deserialize<JsonElement>(json);

                if (filesData.TryGetProperty("items", out var items))
                {
                    foreach (var item in items.EnumerateArray())
                    {
                        if (item.TryGetProperty("name", out var fileName))
                        {
                            var filePath = fileName.GetString();
                            if (!string.IsNullOrEmpty(filePath) && filePath.Contains("ClaimPrize"))
                            {
                                fileNames.Add(filePath.Split('/').Last());
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching file names: {ex.Message}");
        }

        return fileNames;
    }

    private async Task FetchWinnersFromFile(string fileName)
    {
        try
        {
            var response = await HttpClient.GetAsync($"https://firebasestorage.googleapis.com/v0/b/stega-426008.appspot.com/o/users%2FSavedInfo%2F{Uri.EscapeDataString(fileName)}?alt=media");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var winnersDict = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, bool>>>(json);

                if (winnersDict != null)
                {
                    var winnersFromFile = winnersDict
                        .SelectMany(entry => entry.Value.Select(prize => new Winner
                            {
                                UserEmail = entry.Key,
                                Prize = prize.Key
                            })).ToList();

                    allWinnersGroupedByFile[fileName] = winnersFromFile;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data from file {fileName}: {ex.Message}");
        }
    }

    private string GetDrawName(string fileName)
    {
        var timestampPart = fileName.Split('_').Last().Split('.').FirstOrDefault();

        if (!string.IsNullOrEmpty(timestampPart) && DateTime.TryParseExact(timestampPart, "yyyyMMddHHmmss", null, System.Globalization.DateTimeStyles.None, out var drawDate))
        {
            return $"{drawDate:yyyy-MM-dd HH:mm:ss}";
        }

        return "Unknown Draw";
    }

    public class Winner
    {
        public string UserEmail { get; set; }
        public string Prize { get; set; }
    }
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/admin");
    }
}

<style>
    /* Container and Layout */
    .admin-container {
        margin: 20px;
        padding: 20px;
        background: #f5f5f5;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .no-data-message {
        text-align: center;
        color: #dc3545;
        font-size: 18px;
        font-weight: bold;
    }

    /* Winner Card Style */
    .winner-card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        border-left: 5px solid #4CAF50;
    }

        .winner-card h4 {
            color: #333;
            margin-bottom: 10px;
        }

    .total-credits {
        color: #28a745;
        font-weight: bold;
        font-size: 18px;
    }

    /* Winner List Styling */
    .winner-list {
        margin-top: 15px;
        border-top: 1px solid #ddd;
        padding-top: 15px;
    }

    .winner-item {
        padding: 10px;
        border-bottom: 1px solid #ddd;
        margin-bottom: 10px;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

        .winner-item:last-child {
            border-bottom: none;
        }

        .winner-item p {
            margin: 5px 0;
        }

    /* Button Styling */
    .action-button {
        padding: 10px 20px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

        .action-button:hover {
            background: #0056b3;
        }
</style>
