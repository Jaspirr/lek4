@page "/"

@inject NavigationManager NavigationManager
@inject lek4.Components.Service.NumberService NumberService
@inject GoogleFitService GoogleFitService
@inject IJSRuntime JSRuntime

<div class="container" style="background-color: @(GetBackgroundColor())">
    <div class="main-number-container">
        <div class="main-number @GetSizeClass() @explodeClass">
            @number.ToString("0.0x")
        </div>
        @if (!adWatched && number == 0.4)
        {
            <i class="fas fa-lock lock-icon" @onclick="ShowAd"></i>
        }
    </div>
    <div class="step-count">
        Steps: @steps
    </div>
</div>

<StepCounter OnStepsChanged="UpdateNumber" />

<div>
    <button @onclick="DecrementNumber">-</button>
    <span>@number</span>
    <button @onclick="IncrementNumber">+</button>
</div>

<button @onclick="FetchStepsFromGoogleFit">Fetch Steps from Google Fit</button>
<button @onclick="ShowAd">Watch Ad</button> <!-- Knapp för att visa annons -->

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert">@message</div>
}

@code {
    private double number
    {
        get => NumberService.CurrentNumber;
        set
        {
            NumberService.CurrentNumber = value;
            CheckAndShowAd();
        }
    }
    private int steps = 0;
    private string explodeClass = string.Empty;
    private string message;
    private bool adWatched = false; // För att spåra om annonsen har setts
    private static int instanceIdCounter = 0; // Unik identifierare för instanser
    private int instanceId;

    protected override void OnInitialized()
    {
        instanceId = instanceIdCounter++;
    }

    private void UpdateNumber(int stepCount)
    {
        steps = stepCount;
        number = Math.Round(steps / 1000.0, 1);
        TriggerExplosionEffect();
    }

    private void TriggerExplosionEffect()
    {
        explodeClass = "explode";
        StateHasChanged();
        Task.Delay(600).ContinueWith(_ =>
        {
            explodeClass = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task FetchStepsFromGoogleFit()
    {
        try
        {
            await GoogleFitService.InitializeServiceAsync();
            DateTime startDate = DateTime.Now.AddDays(-7);
            DateTime endDate = DateTime.Now;
            steps = await GoogleFitService.GetTotalStepsAsync(startDate, endDate);
            UpdateNumber(steps);
            message = $"Total steps in the last week: {steps}";
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    public string GetProductUrl()
    {
        return $"/products/{number:F1}";
    }

    private string GetBackgroundColor()
    {
        if (number >= 9.0) return "#98FB98"; // PaleGreen
        if (number >= 8.0) return "#FF1493"; // DeepPink
        if (number >= 7.0) return "#cc99ff"; // LightPurple
        if (number >= 6.0) return "#7FFF00"; // Chartreuse
        if (number >= 5.0) return "#FFFF00"; // Yellow
        if (number >= 4.0) return "#ffcc99"; // Peach
        if (number >= 3.0) return "#ffff99"; // LightYellow
        if (number >= 2.0) return "#99ccff"; // LightBlue
        if (number >= 0.9) return "#99ff99"; // LightGreen
        return "#ffffff"; // White
    }

    private string GetSizeClass()
    {
        if (number >= 9.0) return "size-9";
        if (number >= 8.0) return "size-8";
        if (number >= 7.0) return "size-7";
        if (number >= 6.0) return "size-6";
        if (number >= 5.0) return "size-5";
        if (number >= 4.0) return "size-4";
        if (number >= 3.0) return "size-3";
        if (number >= 2.0) return "size-2";
        if (number >= 0.9) return "size-1";
        return "size-0";
    }

    private void IncrementNumber()
    {
        if (!adWatched && number == 0.4)
        {
            ShowAd();
        }
        else
        {
            number = Math.Min(number + 0.1, 9.0);
            Console.WriteLine($"Number incremented to: {number}");
            adWatched = false; // Reset flaggan
        }
    }

    private void DecrementNumber()
    {
        number = Math.Max(number - 0.1, 0.0);
        Console.WriteLine($"Number decremented to: {number}");
    }

    private void GoToProducts()
    {
        NavigationManager.NavigateTo(GetProductUrl());
    }

    private void CheckAndShowAd()
    {
        Console.WriteLine($"Checking if ad should be shown for number: {number}");
        if (number % 0.5 == 0 && !adWatched)
        {
            ShowAd();
        }
    }

    private async void ShowAd()
    {
        await JSRuntime.InvokeVoidAsync("showRewardedAd", instanceId);
    }

    [JSInvokable]
    public void OnAdWatched()
    {
        // Logik för att hantera att annonsen har setts
        adWatched = true;
        JSRuntime.InvokeVoidAsync("startConfetti");
        StateHasChanged(); // Uppdatera UI:t
    }
}

<style>
    .container {
        position: relative;
        padding-top: 10px;
        padding-right: 10px;
    }

    .login-button {
        position: absolute;
        top: 20px;
        right: 20px;
        padding: 10px 20px;
        background-color: mediumpurple;
        color: white;
        border: none;
        opacity: 0.8;
        border-radius: 5px;
        cursor: pointer;
    }

    .login-button:hover {
            background-color: mediumpurple;
            opacity: 0.8;
    }

    .main-number-container {
        position: relative;
        display: inline-block;
    }

    .main-number {
        /* Ditt befintliga CSS-stil för main-number */
    }

    .lock-icon {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 3.5rem;
        color: darkslategrey;
        cursor: pointer;
        z-index: 1; /* Se till att ikonen är överst */
    }

    .lock-icon:hover {
        color: darkslategrey;
    }

    .step-count {
        /* Ditt befintliga CSS-stil för step-count */
    }

    .alert {
        color: red;
        font-weight: bold;
    }
</style>
