@page "/draw"
@using lek4.Components.Service

@inject DrawService DrawService
@inject ProductService ProductService

<h3>Draw Page</h3>

<div class="product-draw">
    @if (productNumbers != null)
    {
        @foreach (var productNumber in productNumbers)
        {
            <div class="product-info">
                <h4>Product @productNumber</h4>

                <p><strong>Winner: @(winners.ContainsKey(productNumber) ? winners[productNumber] : "No winner yet")</strong></p>

                <!-- Timer expired logic -->
                @if (GetTimeRemaining(productNumber).TotalSeconds <= 0)
                {
                    <p>Time expired. You can draw a winner.</p>
                    @if (winners.ContainsKey(productNumber) && winners[productNumber] == "No winner yet")
                    {
                        <button @onclick="() => DrawWinnerAutomatically(productNumber)">Auto Draw Winner</button>
                    }
                }
                else
                {
                    <p>Time remaining: @GetTimeRemaining(productNumber).Days day(s), @GetTimeRemaining(productNumber).Hours hour(s), @GetTimeRemaining(productNumber).Minutes minute(s)</p>
                }

                <!-- Manual Draw -->
                <button @onclick="() => DrawWinnerManually(productNumber)">Draw Winner Manually</button>
            </div>
        }
    }
    else
    {
        <p>Loading products...</p>
    }
</div>

@code {
    private List<int> productNumbers;
    private Dictionary<int, string> winners = new Dictionary<int, string>();

    protected override async Task OnInitializedAsync()
    {
        // Fetch the product numbers when the page initializes
        productNumbers = await ProductService.GetProductNumbersFromFirebaseAsync();

        // Preload any winners if they exist
        foreach (var productNumber in productNumbers)
        {
            // Check if a winner exists for this product
            winners[productNumber] = await DrawService.GetWinnerAsync(productNumber) ?? "No winner yet";
        }
    }

    private TimeSpan GetTimeRemaining(int productNumber)
    {
        // Use ProductService to get remaining time for each product
        return ProductService.GetTimeRemaining(productNumber);
    }

    // Draw winner manually (user clicks)
    private async Task DrawWinnerManually(int productNumber)
    {
        var winner = await DrawService.DrawWinnerAsync(productNumber);
        winners[productNumber] = winner ?? "No winner yet";

        StateHasChanged(); // Trigger UI refresh to display the winner
    }

    // Draw winner automatically (timer expires)
    private async Task DrawWinnerAutomatically(int productNumber)
    {
        if (winners[productNumber] == "No winner yet")
        {
            var winner = await DrawService.DrawWinnerAsync(productNumber);
            winners[productNumber] = winner ?? "No winner yet";

            StateHasChanged(); // Trigger UI refresh to display the winner
        }
    }
}

<style>
    .product-draw {
        display: grid;
        grid-template-columns: repeat(3, 1fr); /* 3 columns */
        gap: 20px;
        padding: 20px;
    }

    .product-info {
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
    }

        .product-info h4 {
            margin-bottom: 10px;
        }

        .product-info p {
            margin-bottom: 5px;
        }

        .product-info button {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .product-info button:hover {
                background-color: #45a049;
            }
</style>
